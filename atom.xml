<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>歷史共業</title>
  
  <subtitle>前端菜鳥筆記</subtitle>
  <link href="/blog/atom.xml" rel="self"/>
  
  <link href="https://yuugou727.github.io/blog/"/>
  <updated>2019-06-30T09:25:26.940Z</updated>
  <id>https://yuugou727.github.io/blog/</id>
  
  <author>
    <name>Ronnie Chang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[Angular] FormArray 眉眉角角</title>
    <link href="https://yuugou727.github.io/blog/2019/06/30/angular-form-array/"/>
    <id>https://yuugou727.github.io/blog/2019/06/30/angular-form-array/</id>
    <published>2019-06-30T09:07:48.000Z</published>
    <updated>2019-06-30T09:25:26.940Z</updated>
    
    <content type="html"><![CDATA[<p>先前我對 FomrArray 一直有個誤解，就是以為在 Angular 的 Reactive Form 中，若表單裡的資料是 array 就要使用它；<del>誰叫拿 angular 跟 form 、 array 三個關鍵字餵狗就會跑出它</del>而事實上只要這樣寫就行了：</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(</span><br><span class="line">  private fb: FormBuilder</span><br><span class="line">) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.form = <span class="keyword">this</span>.fb.group(&#123;</span><br><span class="line">  items: [[]]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>若把 <code>form.value</code> console.log 出來就是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  items: [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那 FormArray 的真正用途是什麼？主要是讓我們能「陣列式」管理表單的控制項，例如以下的通訊錄表單：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(</span><br><span class="line">  private fb: FormBuilder</span><br><span class="line">) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.form = <span class="keyword">this</span>.fb.group(&#123;</span><br><span class="line">  title: [<span class="string">'My Contacts'</span>, Validators.required],</span><br><span class="line">  contacts: <span class="keyword">this</span>.fb.array([</span><br><span class="line">    <span class="keyword">this</span>.fb.group(&#123;</span><br><span class="line">        name: <span class="string">'Jane Doe'</span>,</span><br><span class="line">        phone: <span class="string">'12345678'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ])</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>form.value</code> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  title: <span class="string">'My Contacts'</span>,</span><br><span class="line">  contacts: [&#123;</span><br><span class="line">    name: <span class="string">'Jane Doe'</span>,</span><br><span class="line">    phone: <span class="string">'12345678'</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 form 裡面的 contacts 並不是 JS array，Angular 定義的 <a href="https://angular.io/api/forms/FormArray" target="_blank" rel="noopener">FormArray</a> 沒有像 <code>splice()</code> 等原生 JS 方法可用。</p><h3 id="FormArray-操作"><a href="#FormArray-操作" class="headerlink" title="FormArray 操作"></a>FormArray 操作</h3><p>使用 <code>push()</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="xml"><span class="tag">&lt;<span class="name">FormArray</span>&gt;</span>this.form.get('contacts')).push(</span></span><br><span class="line"><span class="xml">  this.fb.group(&#123;</span></span><br><span class="line"><span class="xml">    name: 'John Doe',</span></span><br><span class="line"><span class="xml">    phone: '3345678'</span></span><br><span class="line"><span class="xml">  &#125;)</span></span><br><span class="line"><span class="xml">);</span></span><br></pre></td></tr></table></figure><p>使用 <code>removeAt(idx)</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="xml"><span class="tag">&lt;<span class="name">FormArray</span>&gt;</span>this.form.get('contacts')).removeAt(idx);</span></span><br></pre></td></tr></table></figure><h3 id="patchValue"><a href="#patchValue" class="headerlink" title="patchValue"></a>patchValue</h3><p>一般 form 裡面的資料可以用 <code>patchValue()</code> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.form.patchValue(&#123;</span><br><span class="line">  title: <span class="string">'Another Contacts'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>對於 FormArray 資料另外用 <code>setControl()</code> 去覆蓋：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.form.setControl(</span><br><span class="line">  <span class="string">'contacts'</span>,</span><br><span class="line">  <span class="keyword">this</span>.fb.array([</span><br><span class="line">    <span class="keyword">this</span>.fb.group(&#123;</span><br><span class="line">      name: <span class="string">'John Doe'</span>,</span><br><span class="line">      phone: <span class="string">'3345678'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ])</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="清空-FormArray"><a href="#清空-FormArray" class="headerlink" title="清空 FormArray"></a>清空 FormArray</h3><p>要清空 FormArray 的元素，讓它長度為 0 時，用 <code>removeAt()</code> 去遞迴，寫成 function：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clearFormArray = <span class="function">(<span class="params">formArray: FormArray</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (formArray.length !== <span class="number">0</span>) &#123;</span><br><span class="line">    formArray.removeAt(<span class="number">0</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另一個比較暴力的做法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clearFormArray = <span class="function">(<span class="params">formArray: FormArray</span>) =&gt;</span> &#123;</span><br><span class="line">  formArray = <span class="keyword">this</span>.formBuilder.array([]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>副作用是若有對 <code>formArray.valueChanges</code> 的訂閱，將會丟失 reference 而出錯，不太推薦。</p><h3 id="玩沙場"><a href="#玩沙場" class="headerlink" title="玩沙場"></a>玩沙場</h3><p>說那麼多不如來段可以玩的 code:</p><iframe style="border:none" width="100%" height="650px" src="https://stackblitz.com/edit/angular-xfg6bw?embed=1&file=src/app/form/form.component.ts"></iframe><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://stackoverflow.com/questions/41852183/angular-2-remove-all-items-from-a-formarray" target="_blank" rel="noopener">angular 2 remove all items from a formarray</a></li><li><a href="https://stackoverflow.com/questions/46495204/angular-formarray-patchvalue-error-typeerror-value-foreach-is-not-a-function" target="_blank" rel="noopener">Angular FormArray patchValue error: TypeError: value.forEach is not a function - how to resolve?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先前我對 FomrArray 一直有個誤解，就是以為在 Angular 的 Reactive Form 中，若表單裡的資料是 array 就要使用它；&lt;del&gt;誰叫拿 angular 跟 form 、 array 三個關鍵字餵狗就會跑出它&lt;/del&gt;而事實上只要這樣寫就行了：&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="Angular" scheme="https://yuugou727.github.io/blog/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] RxJs unsubsribe 的時機</title>
    <link href="https://yuugou727.github.io/blog/2019/06/22/when-to-unsubscribe/"/>
    <id>https://yuugou727.github.io/blog/2019/06/22/when-to-unsubscribe/</id>
    <published>2019-06-22T07:56:58.000Z</published>
    <updated>2019-06-30T08:09:16.052Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要參考下列文章以及內附連結，整理一下在 Angular 運用 RxJs 的注意點及 不需 <code>unsubscribe</code> 的時機：</p><ul><li><a href="https://stackoverflow.com/questions/38008334/angular-rxjs-when-should-i-unsubscribe-from-subscription" target="_blank" rel="noopener">Angular/RxJs When should I unsubscribe from ‘Subscription’</a></li><li><a href="https://github.com/angular/angular/issues/16261#issuecomment-411142051" target="_blank" rel="noopener">Router - auto unsubscribe from the params observable is not working</a></li><li><a href="https://medium.com/@benlesh/rxjs-dont-unsubscribe-6753ed4fda87" target="_blank" rel="noopener">RxJS: Don’t Unsubscribe</a></li></ul><a id="more"></a><p>Observable 的訂閱（Subscription）需要在之後 <code>unsubscribe()</code> 主要是避免 memory leak、或重複訂閱造成預期外的行為 aka 八阿哥，但通常是對<strong>無限</strong>或永遠不會結束（complete）的 Observable。換言之，<strong>有限</strong>或自己會結束的 Observable 是不用特別去呼叫  <code>unsubscribe()</code> 的。</p><h1 id="有限的-Observable"><a href="#有限的-Observable" class="headerlink" title="有限的 Observable"></a>有限的 Observable</h1><h3 id="httpClient"><a href="#httpClient" class="headerlink" title="httpClient"></a>httpClient</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.http.post(...).subscribe(...)</span><br></pre></td></tr></table></figure><blockquote><p>雖然正常情況下 http 請求無論成功錯誤都是會完成，例外是當網路或 server 回應過慢時，使用者可能在 XHR 未完成前就先關閉了 component，subscriber 仍會在完成時被呼叫，如有已參照的變數被 destroyed 將會有不預期的副作用，看需求決定要不掉 unsubscribe。</p></blockquote><h3 id="ActivatedRoute"><a href="#ActivatedRoute" class="headerlink" title="ActivatedRoute"></a>ActivatedRoute</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.route.params(...).subscribe(...)</span><br></pre></td></tr></table></figure><p>參閱<a href="https://angular.io/guide/router#activated-route-in-action" target="_blank" rel="noopener">文件</a>，Router 會自動處理無作用的 ActivatedRoute，如果想寫 unsubscribe 當作練習也沒差。</p><h3 id="AsyncPipe"><a href="#AsyncPipe" class="headerlink" title="AsyncPipe"></a>AsyncPipe</h3><figure class="highlight html"><figcaption><span>component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> [<span class="attr">value</span>]=<span class="string">"text$ | async"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.text$ = <span class="keyword">this</span>.textService.getText();</span><br></pre></td></tr></table></figure><p>Async pipe 的訂閱會跟著 component 的關閉一併 destory。</p><h3 id="善用pipe"><a href="#善用pipe" class="headerlink" title="善用pipe"></a>善用pipe</h3><p>RxJS 提供了 <code>take()</code>、<code>takeWhile()</code>、<code>takeUntil()</code>、<code>first()</code> 等 pipe，幫助我們將 Observable 轉換成有限的，也就不需手動 unsubscribe。</p><h1 id="寫在-Service-裡的-Observable"><a href="#寫在-Service-裡的-Observable" class="headerlink" title="寫在 Service 裡的 Observable"></a>寫在 Service 裡的 Observable</h1><h3 id="內部的訂閱"><a href="#內部的訂閱" class="headerlink" title="內部的訂閱"></a>內部的訂閱</h3><p>Angular 的 service 通常是 singleton（單例），生命週期會一直存活直到整個 web app 分頁被關閉，同時也終止了 JS runtime 與釋放記憶體，因此僅在 service 內部的訂閱，不會有重複訂閱與 memory leak 的問題，不需要 unsubsribe。</p><h3 id="共用-Observable"><a href="#共用-Observable" class="headerlink" title="共用 Observable"></a>共用 Observable</h3><p>若 service 是共享的，提供 Observable 給不同的 component 使用與訂閱，同一個 component 可能會重複 init 與 destroy ，就必須要對訂閱做好 unsubscribe 管理。</p><h1 id="更好的-unsubscribe-方案"><a href="#更好的-unsubscribe-方案" class="headerlink" title="更好的 unsubscribe 方案"></a>更好的 unsubscribe 方案</h1><p>除了以上列出例外，幾乎所有的 Observable 都需要手動 unsubscribe 了，一個簡單的 component 通常不會有太多訂閱，但當 code 因需求越長越肥時，不保證會不會寫到厭世，下列方案還沒親自運用過，寫起來以備不時之需：</p><ul><li><p>安裝第三方套件 <a href="https://www.npmjs.com/package/@w11k/ngx-componentdestroyed" target="_blank" rel="noopener">@w11k/ngx-componentdestroyed</a> 管理，參考<a href="https://medium.com/thecodecampus-knowledge/the-easiest-way-to-unsubscribe-from-observables-in-angular-5abde80a5ae3" target="_blank" rel="noopener">這篇文章</a></p></li><li><p>自訂一個 Subject 並讓所有 Observable 都用 <code>takeUntil()</code> 接上它統一管理：</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">private ngUnsubscribe = <span class="keyword">new</span> Subject();</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(private booksService: BookService) &#123; &#125;</span><br><span class="line"></span><br><span class="line">ngOnInit() &#123;</span><br><span class="line"><span class="keyword">this</span>.booksService.getBooks()</span><br><span class="line">    .pipe(</span><br><span class="line">       startWith([]),</span><br><span class="line">       filter(<span class="function"><span class="params">books</span> =&gt;</span> books.length &gt; <span class="number">0</span>),</span><br><span class="line">       takeUntil(<span class="keyword">this</span>.ngUnsubscribe)</span><br><span class="line">    )</span><br><span class="line">    .subscribe(<span class="function"><span class="params">books</span> =&gt;</span> <span class="built_in">console</span>.log(books));</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.booksService.getArchivedBooks()</span><br><span class="line">    .pipe(takeUntil(<span class="keyword">this</span>.ngUnsubscribe))</span><br><span class="line">    .subscribe(<span class="function"><span class="params">archivedBooks</span> =&gt;</span> <span class="built_in">console</span>.log(archivedBooks));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ngOnDestroy() &#123;</span><br><span class="line"><span class="keyword">this</span>.ngUnsubscribe.next();</span><br><span class="line"><span class="keyword">this</span>.ngUnsubscribe.complete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>參考<a href="https://netbasal.com/diy-subscription-handling-directive-in-angular-c8f6e762697f" target="_blank" rel="noopener">這篇文章</a>，自訂一個 <code>*ngSubscribe</code> 的 directive，就能像 AsyncPipe 一樣寫後不理：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> *<span class="attr">ngSubscribe</span>=<span class="string">"alerts$ as alerts"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">app-alerts</span> [<span class="attr">alerts</span>]=<span class="string">"alerts"</span>&gt;</span><span class="tag">&lt;/<span class="name">app-alerts</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">other-component</span> [<span class="attr">alerts</span>]=<span class="string">"alerts"</span>&gt;</span><span class="tag">&lt;/<span class="name">other-component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要參考下列文章以及內附連結，整理一下在 Angular 運用 RxJs 的注意點及 不需 &lt;code&gt;unsubscribe&lt;/code&gt; 的時機：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/38008334/angular-rxjs-when-should-i-unsubscribe-from-subscription&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Angular/RxJs When should I unsubscribe from ‘Subscription’&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/angular/angular/issues/16261#issuecomment-411142051&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Router - auto unsubscribe from the params observable is not working&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://medium.com/@benlesh/rxjs-dont-unsubscribe-6753ed4fda87&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RxJS: Don’t Unsubscribe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="Angular" scheme="https://yuugou727.github.io/blog/tags/Angular/"/>
    
      <category term="RxJs" scheme="https://yuugou727.github.io/blog/tags/RxJs/"/>
    
  </entry>
  
  <entry>
    <title>將table存成csv檔案</title>
    <link href="https://yuugou727.github.io/blog/2019/02/17/download-table-as-csv/"/>
    <id>https://yuugou727.github.io/blog/2019/02/17/download-table-as-csv/</id>
    <published>2019-02-17T13:37:19.000Z</published>
    <updated>2019-02-17T14:39:43.129Z</updated>
    
    <content type="html"><![CDATA[<p>一樣是工作筆記，記錄一下將網頁的表格<code>&lt;table&gt;</code>存成CSV的做法。</p><a id="more"></a><p>還是寫成了 CodePen 範例比較好理解：</p><p class="codepen" data-height="300" data-theme-id="28350" data-default-tab="js,result" data-user="yuugou727" data-slug-hash="MqVRRb" style="height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid black; margin: 1em 0; padding: 1em;" data-pen-title="download table as CSV">  <span>See the Pen <a href="https://codepen.io/yuugou727/pen/MqVRRb/" target="_blank" rel="noopener">  download table as CSV</a> by Ronnie (<a href="https://codepen.io/yuugou727" target="_blank" rel="noopener">@yuugou727</a>)  on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</span></p><script async src="https://static.codepen.io/assets/embed/ei.js"></script><p>測試了一些包含空格、雙引號跟前一篇 Character Entity 的情況，可以輸出 csv 字串到console 看。 </p><h2 id="要點"><a href="#要點" class="headerlink" title="要點"></a>要點</h2><ul><li>將<code>&lt;thead&gt;</code>與<code>&lt;tbody&gt;</code>裡的值組成二維陣列，用<code>querySelectorAll</code>爬到的元素陣列是Array-like Object，用 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax" target="_blank" rel="noopener">Spread-syntax</a> 可以轉換成 array 使用<code>map</code>方法</li><li>csv 格式中，欄位的值用雙引號<code>&quot;</code>包住，原始資料帶有雙引號字元則用兩個雙引號<code>&quot;&quot;</code>取代。用逗號<code>,</code>分隔每欄，再用換行符<code>\n</code>分隔每列</li><li>在 blob 最前面加上 <a href="https://en.wikipedia.org/wiki/Byte_order_mark" target="_blank" rel="noopener">BOM</a> 標示為 utf-8 編碼</li><li>下載：將 blob 轉換成 objectURL，建立一個<code>a</code>元素寫入其屬性，append、直接呼叫<code>click()</code>後 remove</li><li><del>人活得好好的為什麼要支援IE</del>對於 IE 下載 blob 的方法使用<code>navigator.msSaveBlob()</code></li></ul><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://stackoverflow.com/questions/17879198/adding-utf-8-bom-to-string-blob" target="_blank" rel="noopener">Adding UTF-8 BOM to string/Blob</a></li><li>Saving files locally using Blob and msSaveBlob<br><a href="https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/samples/hh779016(v=vs.85)" target="_blank" rel="noopener">https://docs.microsoft.com/en-us/previous-versions/windows/internet-explorer/ie-developer/samples/hh779016(v=vs.85)</a></li><li><a href="https://ryotah.hatenablog.com/entry/2017/03/22/211227" target="_blank" rel="noopener">クライアント側でCSV生成してダウンロードさせる</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一樣是工作筆記，記錄一下將網頁的表格&lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;存成CSV的做法。&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="HTML" scheme="https://yuugou727.github.io/blog/tags/HTML/"/>
    
      <category term="Javascript" scheme="https://yuugou727.github.io/blog/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>innerText、textContent 屬性加碼 Character Entity</title>
    <link href="https://yuugou727.github.io/blog/2019/02/11/innerText-vs-textContent/"/>
    <id>https://yuugou727.github.io/blog/2019/02/11/innerText-vs-textContent/</id>
    <published>2019-02-11T12:39:04.000Z</published>
    <updated>2019-02-12T03:28:33.571Z</updated>
    
    <content type="html"><![CDATA[<p>不意外地又荒廢了一段時間，<del>我是哪裡？這裡是誰？</del> 趁著開工手上沒太多事前先寫一點東西吧。小小探究一下 HTML 中有點讓人混淆的<code>innerText</code>與<code>textContent</code>。</p><a id="more"></a><h2 id="講古時間"><a href="#講古時間" class="headerlink" title="講古時間"></a>講古時間</h2><p>嚴格來說<code>textContent</code>最初就在 W3C 標準裡，<code>innerText</code>是 IE 在玩的東西，2016 年才被列入標準，FireFox 在45版後才跟進實作。這兩種屬性都能取得 HTML 元素中的文字，但結果有微妙的差異，可參閱 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/innerText" target="_blank" rel="noopener">MDN</a>。</p><h2 id="比較"><a href="#比較" class="headerlink" title="比較"></a>比較</h2><ul><li><code>innerText</code>取得的是經瀏覽器引擎渲染後的<strong>純文字</strong>，所見即所得，連續空白會被整併，<code>&lt;style&gt;</code>tag或被style屬性所隱藏的區塊就不會列出等等</li><li><code>textContent</code>取得 HTML 中每個節點中含有<strong>文本</strong>的文字</li></ul><p>有聽沒有懂很正常，還是看個實際範例，以下是 folk 別人的 CodePen 再加以小修改的 code，慢慢用心體會：</p><iframe height="600" style="width: 100%;" scrolling="no" title="innerText vs. textContent &amp; trim()" src="//codepen.io/yuugou727/embed/vbRvJO/?height=600&theme-id=28350&default-tab=result" frameborder="no" allowtransparency="true" allowfullscreen="true">  See the Pen <a href="https://codepen.io/yuugou727/pen/vbRvJO/" target="_blank" rel="noopener">innerText vs. textContent &amp; trim()</a> by Ronnie  (<a href="https://codepen.io/yuugou727" target="_blank" rel="noopener">@yuugou727</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><p>參透其中奧秘的話，要使用哪種方法取得文字就看需求了，像是如果不想要取得的文字被<code>&lt;pre&gt;</code>、<code>&lt;p&gt;</code>等tag斷行，或想保留空白、忠實呈現 HTML 裡的 Enter 換行，就會考慮使用<code>textContent</code>。</p><h2 id="Character-Entity-Reference"><a href="#Character-Entity-Reference" class="headerlink" title="Character Entity Reference"></a>Character Entity Reference</h2><p>在後面幾段塞的特殊字元，中文翻為<em>字元實體參照</em>，一種用 name 或 number 來表示 Unicode 字元的方式，可以參考 <a href="https://dev.w3.org/html5/html-author/charref" target="_blank" rel="noopener">Character Entity Reference Chart</a>，最常見的大概就<code>&amp;nbsp;</code>（不斷行空格符號）。</p><p>這些字元代表特殊格式的 unicode，瀏覽器渲染時幾乎跟空格一樣，但經由<code>innerHTML</code>或<code>textContent</code>取出後，這些字元才根據其格式表現出來。</p><p>其實這才是寫本文的動機，算之前工作遇到的小坑，剛好和取網頁元素文字的需求喇在一起，迸出新滋味、試誤試到懷疑人生。原本看起來正常的 HTML，print 出來突然縮排換行嚇死人，什麼？案例太極端了用不到？當然不會遇到最好，然而墨菲定律告訴我們：夜路走多碰到鬼，code寫多踩到雷，看過有印象才知道可能的雷藏在哪。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://stackoverflow.com/questions/11984029/difference-between-32-and-nbsp" target="_blank" rel="noopener">Difference between &amp;#32; and &amp;nbsp;</a></li><li><a href="https://dev.w3.org/html5/html-author/charref" target="_blank" rel="noopener">Character Entity Reference Chart</a></li><li><a href="https://entitycode.com/#common-content" target="_blank" rel="noopener">https://entitycode.com/#common-content</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不意外地又荒廢了一段時間，&lt;del&gt;我是哪裡？這裡是誰？&lt;/del&gt; 趁著開工手上沒太多事前先寫一點東西吧。小小探究一下 HTML 中有點讓人混淆的&lt;code&gt;innerText&lt;/code&gt;與&lt;code&gt;textContent&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="HTML" scheme="https://yuugou727.github.io/blog/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>[驅動程式] 為 MSI GS60 啟用 Windows 10 觸控板手勢</title>
    <link href="https://yuugou727.github.io/blog/2018/09/15/msi-gs60-win10-gestures/"/>
    <id>https://yuugou727.github.io/blog/2018/09/15/msi-gs60-win10-gestures/</id>
    <published>2018-09-15T05:59:39.000Z</published>
    <updated>2018-11-29T05:18:41.771Z</updated>
    
    <content type="html"><![CDATA[<blockquote class="pullquote tip"><p><strong>不負責任聲明</strong>：本篇僅為個人研究筆記，不建議電腦生手效仿，所產生之不預期後果須自負</p></blockquote><p>有競爭才不會擠牙膏，微軟在 Windows 8 <del>不意外地</del>失勢後，眼看某些 PC 市場就要與 Mac 黃金交叉，發憤圖強下生出的 Windows 10 不得不說是蠻好用的，其中<del>瓢竊</del>致敬對手的觸控板手勢，也減少我下一台想換 Mac 的誘因，至少再戰個兩三年…</p><a id="more"></a><p>GS60 當初預裝 Windows 8，升到 Windows 10 後發現 ELAN 觸控板不支援手勢功能，微星也沒有提供新的驅動，所以就像閹割版的 OS ，開發效率硬是輸人許多，只有半殘的 ELAN 自帶手勢。<del>三指上滑投影片放映超雞肋</del></p><p>就在某個解完 issue 的放鬆下午，一時興起搜到了<a href="https://www.reddit.com/r/MSILaptops/comments/5ki7ed/gs63vr_there_is_a_working_driver_for_using_the/" target="_blank" rel="noopener">這篇 Reddit</a>，美國鄉民用新版的 <a href="https://drivers.softpedia.com/get/Other-DRIVERS-TOOLS/Others/ELAN-Input-Device-for-WDF-Driver-161132-for-Windows-10-64-bit.shtml" target="_blank" rel="noopener">ELAN 驅動程式</a> 解開 GS63VR 觸控板的封印，這樣看來不是硬體不支援，純粹是官方懶的寫。文內提到<em>GS系列有可能適用</em>，試了幾十分鐘，過程有遇到小障礙也成功解封，這裡記一下粗略步驟，之後 1809 大型更新應該會再用到：</p><blockquote class="pullquote tip"><p><strong>注意</strong>：安裝後將無法使用組合快捷鍵 <code>Fn + F3</code> 關閉觸控板功能</p></blockquote><h1 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h1><blockquote><p>準備一隻外接滑鼠，以備驅動無效時之需</p></blockquote><ol><li>下載連結.cab檔，打開把裡面檔案全部複製到外面開新資料夾存</li><li>執行裡面的 <code>Setup.exe</code>，完成後重開機，若顯示不支援至第4步</li><li>試看看三指、四指掃滑的切換 App、切換桌面，或檢查設定的觸控板有無此選項，沒成功的話往下強制更新驅動</li><li>開始圖示上點右鍵 &gt; 裝置管理員 &gt; 滑鼠與指標裝置 &gt; 在「ELAN Input Device」上右鍵 &gt; 更新驅動程式</li><li>選取第二項「瀏覽電腦上的程式軟體」 &gt; 「讓我從電腦上的可用驅動程式清單挑選」 &gt; 右下角「從磁片安裝」&gt; 路徑為一開始複製驅動的資料夾 &gt; 選取 <code>ETD.inf</code> 安裝</li><li>重複 4, 5 安裝以下：<ul><li>「人性化介面裝置」&gt;「ELAN miniport PTP Driver」選取 <code>ETDminiPTP.inf</code></li><li>「系統裝置」&gt;「ELAN SMBus Driver」選取 <code>ETDSMBus.inf</code> </li></ul></li><li>重新啟動，檢查裝置管理員安裝過的驅動版本號或日期是否正確，或者再 run 一次 <code>Setup.exe</code></li></ol><p>之後應能順利啟用，開始把玩各種手勢功能</p><h3 id="備註"><a href="#備註" class="headerlink" title="備註"></a>備註</h3><p>步驟 4 ~ 6，除了「從磁片安裝」，也可以先在那那三個 .inf 檔上右鍵 &gt; 安裝，就能在可用的驅動程式清單中選取。</p><p>若在 VScode 遇到捲動不順的情形，進 User Settings 將 <code>Window: Smooth Scrolling Workaround</code> 開啟，並將 <code>Window: Title Bar Style</code> 設為 <code>native</code>。</p><h2 id="連結"><a href="#連結" class="headerlink" title="連結"></a>連結</h2><ul><li><a href="https://drivers.softpedia.com/get/Other-DRIVERS-TOOLS/Others/ELAN-Input-Device-for-WDF-Driver-161132-for-Windows-10-64-bit.shtml" target="_blank" rel="noopener">ELAN Input Device for WDF Driver 16.11.3.2 for Windows 10 64-bit</a></li></ul><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul><li><a href="https://www.windowscentral.com/how-enable-precision-touchpad-drivers#ampshare=https://www.windowscentral.com/how-enable-precision-touchpad-drivers" target="_blank" rel="noopener">How to enable a Precision Touchpad for more gestures on your laptop</a> </li><li><a href="https://www.youtube.com/watch?v=f2rfwR-IV-c" target="_blank" rel="noopener">Dave2D Youtube</a></li><li><a href="https://www.msi.com/asset/global/picture/faq/10016371@2018-0802-0453-194359@kb_03177_ct.pdf" target="_blank" rel="noopener">GS65官方說明</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote class=&quot;pullquote tip&quot;&gt;&lt;p&gt;&lt;strong&gt;不負責任聲明&lt;/strong&gt;：本篇僅為個人研究筆記，不建議電腦生手效仿，所產生之不預期後果須自負&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;有競爭才不會擠牙膏，微軟在 Windows 8 &lt;del&gt;不意外地&lt;/del&gt;失勢後，眼看某些 PC 市場就要與 Mac 黃金交叉，發憤圖強下生出的 Windows 10 不得不說是蠻好用的，其中&lt;del&gt;瓢竊&lt;/del&gt;致敬對手的觸控板手勢，也減少我下一台想換 Mac 的誘因，至少再戰個兩三年…&lt;/p&gt;
    
    </summary>
    
      <category term="生活" scheme="https://yuugou727.github.io/blog/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="ELAN" scheme="https://yuugou727.github.io/blog/tags/ELAN/"/>
    
      <category term="驅動程式" scheme="https://yuugou727.github.io/blog/tags/%E9%A9%85%E5%8B%95%E7%A8%8B%E5%BC%8F/"/>
    
      <category term="Windows 10" scheme="https://yuugou727.github.io/blog/tags/Windows-10/"/>
    
  </entry>
  
  <entry>
    <title>[Angular] ngx-translate 的 setTranslation() 與一些眉角</title>
    <link href="https://yuugou727.github.io/blog/2018/08/26/ngx-translate-settranslation/"/>
    <id>https://yuugou727.github.io/blog/2018/08/26/ngx-translate-settranslation/</id>
    <published>2018-08-26T09:33:06.000Z</published>
    <updated>2018-11-29T05:18:41.769Z</updated>
    
    <content type="html"><![CDATA[<p>命運多舛，在當了幾個月待業廢物後，總算找到風氣跟待遇都不錯的新工作，<del>如果寫扣寫到懷疑人生就離職換工作吧</del>。也為了新工作開始學習 Angular，解開使用三大前端框架的成就，這次來記錄 Angular i18n 套件 <a href="http://www.ngx-translate.com/" target="_blank" rel="noopener">ngx-translate</a> 上所碰到的問題與解決方法。</p><a id="more"></a><h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><p>主要是實務上需要使用到</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setTranslation(lang: <span class="built_in">string</span>, translations: <span class="built_in">Object</span>, shouldMerge: <span class="built_in">boolean</span> = <span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>這個 method 時，所歸納的要點：</p><ul><li><code>setTranslation()</code> 第三個參數 <code>shouldMerge</code> 結果不符預期，使用 Lodash 的 <code>_.merge()</code> 自幹解決</li><li><code>setTranslation()</code> 一定要在 <code>use()</code> 與 <code>setDefaultLang()</code> 之前完成，否則會吃到舊的翻譯檔，也就是不會熱更新</li><li>由於 <code>setTranslation()</code> 沒有 return Observerble，因此用 <code>setTimeout(0)</code> 來實現第二點的非同步。</li></ul><h1 id="心路歷程"><a href="#心路歷程" class="headerlink" title="心路歷程"></a>心路歷程</h1><h2 id="基本設置"><a href="#基本設置" class="headerlink" title="基本設置"></a>基本設置</h2><p>用 Angular-cli 新建一個 project，照著 ngx-translate 文件 <code>npm install --save</code> 安裝 <code>@ngx-translate/core</code> 與 <code>@ngx-translate/http-loader</code> ，在 app,module.ts 裡接好 loader </p><figure class="highlight ts"><figcaption><span>app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; HttpClientModule, HttpClient&#125; <span class="keyword">from</span> <span class="string">'@angular/common/http'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TranslateModule, TranslateLoader &#125; <span class="keyword">from</span> <span class="string">'@ngx-translate/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TranslateHttpLoader &#125; <span class="keyword">from</span> <span class="string">'@ngx-translate/http-loader'</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">HttpLoaderFactory</span>(<span class="params">http: HttpClient</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> TranslateHttpLoader(http);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  imports: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    HttpClientModule,</span><br><span class="line">    TranslateModule.forRoot(&#123;</span><br><span class="line">      loader: &#123;</span><br><span class="line">        provide: TranslateLoader,</span><br><span class="line">        useFactory: HttpLoaderFactory,</span><br><span class="line">        deps: [HttpClient]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><p>寫兩份翻譯檔，放在 <code>src/assets/i18n/</code> 資料夾底下</p><figure class="highlight json"><figcaption><span>en.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"WELCOME_TO"</span>: <span class="string">"Welcome to"</span>,</span><br><span class="line">  <span class="attr">"SELECT_LANGUAGE"</span>: <span class="string">"Select a language"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><figcaption><span>zh-TW.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"WELCOME_TO"</span>: <span class="string">"歡迎使用"</span>,</span><br><span class="line">  <span class="attr">"SELECT_LANGUAGE"</span>: <span class="string">"選擇語言"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 template 中寫個簡單的語言切換選單</p><figure class="highlight html"><figcaption><span>app.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"text-align:center"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    &#123;&#123; 'WELCOME_TO' | translate &#125;&#125; &#123;&#123; title &#125;&#125;!</span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"lang"</span>&gt;</span></span><br><span class="line">    &#123;&#123; 'SELECT_LANGUAGE' | translate &#125;&#125;:</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> #<span class="attr">langSelect</span> <span class="attr">name</span>=<span class="string">"lang"</span> (<span class="attr">change</span>)=<span class="string">"translate.use(langSelect.value)"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> *<span class="attr">ngFor</span>=<span class="string">"let lang of translate.getLangs()"</span> [<span class="attr">value</span>]=<span class="string">"lang"</span></span></span><br><span class="line"><span class="tag">        [<span class="attr">selected</span>]=<span class="string">"lang === translate.currentLang"</span>&gt;</span>&#123;&#123; lang &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 constructor 中使用 TranslateService</p><figure class="highlight ts"><figcaption><span>app.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; TranslateService, LangChangeEvent &#125; <span class="keyword">from</span> <span class="string">'@ngx-translate/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">  title = <span class="string">'ngx-translate'</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"></span></span><br><span class="line"><span class="params">    <span class="keyword">public</span> translate: TranslateService</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    translate.addLangs([<span class="string">'en'</span>, <span class="string">'zh-TW'</span>]);</span><br><span class="line">    translate.setDefaultLang(<span class="string">'en'</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>ng serve</code> 跑起來，就能看到我們簡單的 i18n 網頁</p><img src="/blog/2018/08/26/ngx-translate-settranslation/en.png"><img src="/blog/2018/08/26/ngx-translate-settranslation/zh-TW.png"><h2 id="語系判別-amp-儲存設定"><a href="#語系判別-amp-儲存設定" class="headerlink" title="語系判別 &amp; 儲存設定"></a>語系判別 &amp; 儲存設定</h2><p>我們也能將選取的語言值儲存到 <code>localStorage</code>，下次開啟網頁時就能沿用，並使用 <code>getBrowserCultureLang()</code> 做預設 fallback，改完的 constructor 長這樣：</p><figure class="highlight ts"><figcaption><span>app.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">translate.addLangs([<span class="string">'en'</span>, <span class="string">'zh-TW'</span>]);</span><br><span class="line">translate.onLangChange.subscribe(<span class="function">(<span class="params">event: LangChangeEvent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;lang&#125; = event;</span><br><span class="line">  localStorage.setItem(<span class="string">'useLang'</span>, lang);</span><br><span class="line">&#125;);</span><br><span class="line">translate.setDefaultLang(<span class="string">'en'</span>);</span><br><span class="line"><span class="keyword">const</span> useLang = localStorage.getItem(<span class="string">'useLang'</span>);</span><br><span class="line"><span class="keyword">if</span> (useLang) &#123;</span><br><span class="line">  translate.use(useLang);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> browserLang = translate.getBrowserCultureLang();</span><br><span class="line">  translate.use( translate.langs.includes(browserLang) ? browserLang : <span class="string">'en'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Merge-額外的翻譯"><a href="#Merge-額外的翻譯" class="headerlink" title="Merge 額外的翻譯"></a>Merge 額外的翻譯</h2><p>真正的需求來了，如果想將選單裡的「en」、「zh-TW」也翻成「English」與「正體中文」：</p><figure class="highlight html"><figcaption><span>app.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">option</span> *<span class="attr">ngFor</span>=<span class="string">"let lang of translate.getLangs()"</span> [<span class="attr">value</span>]=<span class="string">"lang"</span></span></span><br><span class="line"><span class="tag">  [<span class="attr">selected</span>]=<span class="string">"lang === translate.currentLang"</span>&gt;</span>&#123;&#123; lang  | translate &#125;&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br></pre></td></tr></table></figure><p>不想把翻譯重複寫在 json 裡，另外 merge key-value 進去可以嗎？看文件似乎使用 <code>setTranslate()</code> 並設定第三個參數為 <code>true</code> 就能達到我們要的結果</p><figure class="highlight ts"><figcaption><span>app.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//...</span></span><br><span class="line">  translate.onLangChange.subscribe(<span class="function">(<span class="params">event: LangChangeEvent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;lang&#125; = event;</span><br><span class="line">    localStorage.setItem(<span class="string">'useLang'</span>, lang);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> lang of translate.getLangs() ) &#123;</span><br><span class="line">      translate.setTranslation(lang, &#123;</span><br><span class="line">        <span class="string">'en'</span>: <span class="string">'English'</span>,</span><br><span class="line">        <span class="string">'zh-TW'</span>: <span class="string">'正體中文'</span></span><br><span class="line">      &#125;, <span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>實際上卻不是這樣…</p><img src="/blog/2018/08/26/ngx-translate-settranslation/failed.png"><p>原有的翻譯不見了，只剩下選單的翻譯，這行為看起來是 replace 而非 merge，<del>文件居然陰我！？</del> <a href="https://github.com/ngx-translate/core/issues?utf8=%E2%9C%93&q=is%3Aissue+is%3Aopen+setTranslation" target="_blank" rel="noopener">查了 Github 的 issue </a>發現一堆人發了類似問題，也都沒有回應根本被放生WTF…</p><img src="https://media.giphy.com/media/aZ3LDBs1ExsE8/giphy.gif"><p>山不轉路轉，只要直接給它 merge 好的翻譯就可以了吧？因此把 Lodash 拉進來改寫…</p><figure class="highlight ts"><figcaption><span>app.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; merge &#125; <span class="keyword">from</span> <span class="string">'lodash'</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> lang of translate.getLangs() ) &#123;</span><br><span class="line">        <span class="keyword">const</span> json = <span class="built_in">require</span>(<span class="string">`../assets/i18n/<span class="subst">$&#123;lang&#125;</span>.json`</span>);</span><br><span class="line">        <span class="keyword">const</span> mergedLocale = merge(json, &#123;</span><br><span class="line">          <span class="string">'en'</span>: <span class="string">'English'</span>,</span><br><span class="line">          <span class="string">'zh-TW'</span>: <span class="string">'正體中文'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        translate.setTranslation(lang, mergedLocale);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="先後順序"><a href="#先後順序" class="headerlink" title="先後順序"></a>先後順序</h2><p> merge 後的翻譯 log 出來是正確的，結果只有中文頁 OK 但英文頁沒翻譯到選單？撞牆了一段時間才發現順序的重要性： *<em>必須先執行完 <code>setTranslation()</code>，再執行 <code>setDefaultLang()</code> 與 <code>use()</code> *</em> 。由於 <code>setTranslation()</code> 並沒有回傳值或是 Observerble，只好利用 JS 本身的 Queue：將 <code>setDefaultLang()</code> 與 <code>use()</code> 包在 <code>setTimeout(0)</code> 裡面，就能保證非同步順序：</p><figure class="highlight ts"><figcaption><span>app.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">translate.addLangs([<span class="string">'en'</span>, <span class="string">'zh-TW'</span>]);</span><br><span class="line">translate.onLangChange.subscribe(<span class="function">(<span class="params">event: LangChangeEvent</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;lang&#125; = event;</span><br><span class="line">  localStorage.setItem(<span class="string">'useLang'</span>, lang);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> lang of translate.getLangs() ) &#123;</span><br><span class="line">    <span class="keyword">const</span> json = <span class="built_in">require</span>(<span class="string">`../assets/i18n/<span class="subst">$&#123;lang&#125;</span>.json`</span>);</span><br><span class="line">    <span class="keyword">const</span> mergedLocale = merge(json, &#123;</span><br><span class="line">      <span class="string">'en'</span>: <span class="string">'English'</span>,</span><br><span class="line">      <span class="string">'zh-TW'</span>: <span class="string">'正體中文'</span></span><br><span class="line">    &#125;);</span><br><span class="line">    translate.setTranslation(lang, mergedLocale);</span><br><span class="line">&#125;</span><br><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  translate.setDefaultLang(<span class="string">'en'</span>);</span><br><span class="line">  <span class="keyword">const</span> useLang = localStorage.getItem(<span class="string">'useLang'</span>);</span><br><span class="line">  <span class="keyword">if</span> (useLang) &#123;</span><br><span class="line">    translate.use(useLang);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> browserLang = translate.getBrowserCultureLang();</span><br><span class="line">    translate.use( translate.langs.includes(browserLang) ? browserLang : <span class="string">'en'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>總算，整頁與選單都能正確翻譯了</p><img src="/blog/2018/08/26/ngx-translate-settranslation/success.png"><h1 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h1><p>這麼長一串有點像幫第三方擦屁股，不確定 <code>setTranslation()</code> 裡面是不是有讓 <code>TranslateService</code> subscribe 觸發翻譯更新，文件也沒提到多少細節，還是呼籲大家慎選第三方 library 。</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ul><li><a href="https://github.com/ngx-translate/core" target="_blank" rel="noopener">https://github.com/ngx-translate/core</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;命運多舛，在當了幾個月待業廢物後，總算找到風氣跟待遇都不錯的新工作，&lt;del&gt;如果寫扣寫到懷疑人生就離職換工作吧&lt;/del&gt;。也為了新工作開始學習 Angular，解開使用三大前端框架的成就，這次來記錄 Angular i18n 套件 &lt;a href=&quot;http://www.ngx-translate.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ngx-translate&lt;/a&gt; 上所碰到的問題與解決方法。&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="Angular" scheme="https://yuugou727.github.io/blog/tags/Angular/"/>
    
      <category term="ngx-translate" scheme="https://yuugou727.github.io/blog/tags/ngx-translate/"/>
    
      <category term="i18n" scheme="https://yuugou727.github.io/blog/tags/i18n/"/>
    
  </entry>
  
  <entry>
    <title>[Webpack][Vue.js] 動態編譯 assets 嘗試</title>
    <link href="https://yuugou727.github.io/blog/2018/04/09/webpack-vue-dynamic-assets/"/>
    <id>https://yuugou727.github.io/blog/2018/04/09/webpack-vue-dynamic-assets/</id>
    <published>2018-04-09T10:18:28.000Z</published>
    <updated>2018-11-29T05:18:41.767Z</updated>
    
    <content type="html"><![CDATA[<p>在 Vue 開發中，假如我們手上有幾張編號編好的素材圖片，放在專案的<code>/src/assets/</code>資料夾中。<a id="more"></a>要將它們依序顯示，正常思路下會用<code>v-for</code>寫出：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-for</span>=<span class="string">"i in 3"</span> <span class="attr">:src</span>=<span class="string">"`./assets/cat$&#123;i&#125;.jpg`"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>結果在 dev-server 圖片就出不來，console 給的訊息是<code>GET http://localhost:8080/assets/cat1.jpg 404 (Not Found)</code>，初步看來是 Webpack 的 file-loader 不認動態綁定的 src …</p><p>當然可以不要用<code>v-for</code>，無腦交差了事…</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/cat1.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/cat2.jpg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/cat3.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>有點 sense 的工程師馬上能嗅出這違反<a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself" target="_blank" rel="noopener">DRY原則</a>。而且需求不會最奇葩、只有更奇葩，假如下來的規格是搭配 Bootstrap 框架，做一組單選 radio ，每個選項值用 <code>v-model</code> 綁定，label 裡必須是對應編號的圖片：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"custom-control custom-radio custom-control-inline mb-2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"custom-control-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"1"</span> <span class="attr">id</span>=<span class="string">"cat1"</span> <span class="attr">v-model</span>=<span class="string">"catChosen"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"custom-control-label"</span> <span class="attr">:for</span>=<span class="string">"cat1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/cat1.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"custom-control custom-radio custom-control-inline mb-2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"custom-control-input"</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">value</span>=<span class="string">"2"</span> <span class="attr">id</span>=<span class="string">"cat2"</span> <span class="attr">v-model</span>=<span class="string">"catChosen"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"custom-control-label"</span> <span class="attr">:for</span>=<span class="string">"cat2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./assets/cat2.jpg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>又臭又長，正常的前端到此會出現<em>頭暈、噁心的臨床反應</em>。更別說今天 UI 好心只給3張圖，哪天需求變成20張圖就能靠代碼行數充充 KPI 呢。</p><p>於是開始估狗與嘗試，如何用動態的寫法讓 Webpack 也能正常編譯出來。</p><h2 id="靜態資源"><a href="#靜態資源" class="headerlink" title="靜態資源"></a>靜態資源</h2><p>一種做法是把素材全當成靜態資源，全部放到與 src 同層級的<code>/static/</code>資料夾下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└ vue-project</span><br><span class="line">  ├ dist/</span><br><span class="line">  ├ src/</span><br><span class="line">  ├ static/</span><br><span class="line">  └ ...</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-for</span>=<span class="string">"i in 3"</span> <span class="attr">:src</span>=<span class="string">"`static/cat$&#123;i&#125;.jpg`"</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/blog/2018/04/09/webpack-vue-dynamic-assets/static1.jpg"><p>此時圖片就正常顯示了。不過要照開發情境取捨利弊，因為這失去使用 Webpack 幫我們打包的意義，例如圖檔路徑就沒有 hash 指紋讓瀏覽器快取判斷更新時機，或者無法搭配 url-loader 將圖片轉成 base64，參考<a href="https://github.com/vuejs/vue-cli/issues/106" target="_blank" rel="noopener">將檔案放在 static 與 src/assets 的差異</a>。</p><img src="/blog/2018/04/09/webpack-vue-dynamic-assets/static2.jpg"><h2 id="require"><a href="#require" class="headerlink" title="require()"></a><code>require()</code></h2><p>之後爬了一些文，算是找到比較正統的作法，只要把圖片路徑用<code>require()</code>去 call 就好：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-for</span>=<span class="string">"i in 3"</span> <span class="attr">:src</span>=<span class="string">"require(`./assets/cat$&#123;i&#125;.jpg`)"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以把它包成 method </p><figure class="highlight html"><figcaption><span>template</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-for</span>=<span class="string">"i in 3"</span> <span class="attr">:src</span>=<span class="string">"catImg(i)"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>script</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  catImg: <span class="function"><span class="keyword">function</span>(<span class="params">i</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">`./assets/cat<span class="subst">$&#123;i&#125;</span>.jpg`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>圖片也成功編譯到<code>/dist</code>資料夾，路徑帶有 hash 指紋</p><img src="/blog/2018/04/09/webpack-vue-dynamic-assets/dynamic1.jpg"><p>只是這方法也有奇怪、但影響不大的 bug … 例如我另外加了 cat4.jpg, cat5.jpg 當成<strong>沒被用到的素材</strong>，然後<code>npm run build</code>…</p><img src="/blog/2018/04/09/webpack-vue-dynamic-assets/5cats.jpg"><p>各位觀眾，五隻貓！</p><img src="/blog/2018/04/09/webpack-vue-dynamic-assets/terrific.jpg"><p>跟預想的行為有出入，檔案只用到三張圖卻五張貓都抓進去了，不過沒用到的 logo.png 倒是很正常地沒被編譯，搞不清楚是 <code>file-loader</code> 還是 <code>v-for</code> 的問題，<del>活著好難心好累</del>，至少缺點比用靜態參照的方式還小、可以接受，看日後小精靈會不會幫我找到解答。</p><h2 id="附上相關連結"><a href="#附上相關連結" class="headerlink" title="附上相關連結"></a>附上相關連結</h2><ul><li><a href="https://github.com/vuejs-templates/webpack/issues/126" target="_blank" rel="noopener">https://github.com/vuejs-templates/webpack/issues/126</a></li><li><a href="https://github.com/vuejs/vue-loader/issues/814" target="_blank" rel="noopener">https://github.com/vuejs/vue-loader/issues/814</a></li><li><a href="https://vuejs-templates.github.io/webpack/static.html" target="_blank" rel="noopener">https://vuejs-templates.github.io/webpack/static.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 Vue 開發中，假如我們手上有幾張編號編好的素材圖片，放在專案的&lt;code&gt;/src/assets/&lt;/code&gt;資料夾中。
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://yuugou727.github.io/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://yuugou727.github.io/blog/tags/Vue-js/"/>
    
      <category term="Webpack" scheme="https://yuugou727.github.io/blog/tags/Webpack/"/>
    
  </entry>
  
  <entry>
    <title>axios小筆記</title>
    <link href="https://yuugou727.github.io/blog/2018/03/04/axios/"/>
    <id>https://yuugou727.github.io/blog/2018/03/04/axios/</id>
    <published>2018-03-04T06:25:43.000Z</published>
    <updated>2018-11-29T05:18:41.766Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/axios/axios" target="_blank" rel="noopener">Axios</a> 是以 Promise 為基礎去實現的 XHR AJAX，會開始使用它是因為 Vue 官方推薦使用它來取代原本的 <a href="https://github.com/pagekit/vue-resource" target="_blank" rel="noopener">vue-resource</a>，而且自己也想學有別於 <code>jquery.ajax()</code> 的 AJAX 處理，順便練習 Promise 語法，便開始在最近的 Vue 專案上導入。</p><a id="more"></a><p>雖說現代的 XHR 替代方案 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API" target="_blank" rel="noopener">Fetch API</a> 像是明日之星，但考量到瀏覽器支援與穩定度後仍選擇 axios 。也趁現在熟悉 Promise 語法，日後就能無痛接軌 <code>Fetch</code> 與 ES7 的 <code>async</code>,<code>await</code>。</p><img src="/blog/2018/03/04/axios/f.JPG"><p><code>Fetch API</code>的瀏覽器支援</p><img src="/blog/2018/03/04/axios/a.JPG"><p>Axios的瀏覽器支援 </p><p>由於基本用法 github 的 readme 已經寫得很詳細，這邊只記一些比較特殊的技巧。</p><h2 id="axios-create-config"><a href="#axios-create-config" class="headerlink" title="axios.create({config})"></a><code>axios.create({config})</code></h2><p>axios 可以創建 instance，我們可以針對不同的需求寫出個別的 axios 來用。例如寫一個需要驗證功能的 api，與不須驗證的公用 apiPublic。</p><figure class="highlight js"><figcaption><span>api.js </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://auth.com'</span>,</span><br><span class="line">  <span class="comment">//some authentication logic</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></table></figure><figure class="highlight js"><figcaption><span>apiPublic.js </span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">'https://public.com'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance;</span><br></pre></td></tr></table></figure><h2 id="transformRequest"><a href="#transformRequest" class="headerlink" title="transformRequest"></a><code>transformRequest</code></h2><p>寫在 config 裡，只用在’PUT’,’POST’,’PATCH’時，用來在發出 request 前先對要傳的 data 做處理。要注意的是值必須是 array，裡面放 function。</p><p>什麼時候會用到？像是敝社用來驗證的 token 不放在 header 裡，而是跟資料塞一起丟給 server，就要像這樣處理：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">transformRequest: [].concat(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> token = Cookies.get(<span class="string">'token'</span>);</span><br><span class="line">  <span class="keyword">const</span> mergedData = $.extend(<span class="literal">true</span>, data, &#123; token &#125;);</span><br><span class="line">  <span class="keyword">return</span> mergedData;</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure><p>當然總是有更奇葩的需求，axios 預設傳的是 JSON，偏偏<del>老舊的</del>後端只吃 <code>application/x-www-form-urlencoded</code>，就還要再透過 parser 轉換成 query string。可以用 <a href="https://www.npmjs.com/package/qs" target="_blank" rel="noopener">qs</a>，npm 應該蠻多 package 都有依賴，我沒特別裝都能引用到。 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// config...</span></span><br><span class="line">  transformRequest: [].concat(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> token = Cookies.get(<span class="string">'token'</span>);</span><br><span class="line">    <span class="keyword">const</span> mergedData = $.extend(<span class="literal">true</span>, data, &#123; token &#125;);</span><br><span class="line">    <span class="keyword">return</span> qs.stringify(mergedData);</span><br><span class="line">  &#125;),</span><br></pre></td></tr></table></figure><h2 id="Interceptors"><a href="#Interceptors" class="headerlink" title="Interceptors"></a>Interceptors</h2><p>與<code>transformRequest</code>稍微不同，interceptors 可攔截 request 或 response，在<code>then()</code>或<code>catch()</code>之前做些判斷。</p><p>例如 API 總是檢查登入狀態，會在錯誤時回傳的 JSON 包個 <code>error: &#39;login failed&#39;</code>。我們只需檢查這個 key， 直接讓它 throw error 到 <code>catch()</code> 裡面進行後續處理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">  &#125;).catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// failed</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">instance.interceptors.response.use( <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; data &#125; = response;</span><br><span class="line">  <span class="keyword">if</span> ( data.err )&#123;</span><br><span class="line">    <span class="keyword">throw</span> data.err;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="檔案上傳"><a href="#檔案上傳" class="headerlink" title="檔案上傳"></a>檔案上傳</h2><p>將要上傳的檔案轉成 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Blob" target="_blank" rel="noopener">Blob 物件</a>，並使用 <a href="https://developer.mozilla.org/en-US/docs/Web/API/FormData" target="_blank" rel="noopener">FormData API</a> 格式傳輸，在這之前需要將 request header 的 <code>Content-Type</code> 設成 <code>multipart/form-data</code>，</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">id</span>=<span class="string">"input"</span> <span class="attr">onchange</span>=<span class="string">"uploadFile(this.files)"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">files</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> selectedfile = files[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">const</span> fd = <span class="keyword">new</span> FormData();</span><br><span class="line">  fd.append(<span class="string">'file'</span>, <span class="keyword">new</span> Blob([selectedFile]));</span><br><span class="line">  axios.post(<span class="string">'/uploadFileAPI'</span>, fd , &#123;</span><br><span class="line">    headers: &#123; <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span> &#125;,</span><br><span class="line">    transformRequest: [<span class="function">(<span class="params">data, headers</span>) =&gt;</span> data], <span class="comment">//預設值，不做任何轉換</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看之後還有什麼<del>想翻桌的</del>需求解法，遇到再補上。</p><h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><a href="https://www.ithome.com.tw/voice/121435" target="_blank" rel="noopener">從XHR到Fetch</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://github.com/axios/axios&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Axios&lt;/a&gt; 是以 Promise 為基礎去實現的 XHR AJAX，會開始使用它是因為 Vue 官方推薦使用它來取代原本的 &lt;a href=&quot;https://github.com/pagekit/vue-resource&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;vue-resource&lt;/a&gt;，而且自己也想學有別於 &lt;code&gt;jquery.ajax()&lt;/code&gt; 的 AJAX 處理，順便練習 Promise 語法，便開始在最近的 Vue 專案上導入。&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="Javascript" scheme="https://yuugou727.github.io/blog/tags/Javascript/"/>
    
      <category term="axios" scheme="https://yuugou727.github.io/blog/tags/axios/"/>
    
  </entry>
  
  <entry>
    <title>HTML5 input 中的 pattern 屬性</title>
    <link href="https://yuugou727.github.io/blog/2018/02/20/html5-pattern/"/>
    <id>https://yuugou727.github.io/blog/2018/02/20/html5-pattern/</id>
    <published>2018-02-20T09:11:16.000Z</published>
    <updated>2018-11-29T05:18:41.765Z</updated>
    
    <content type="html"><![CDATA[<p>新年快樂。恭喜自己又活過了一年。<br>這篇來記一下原生 Html5 就有的網頁表單驗證功能，</p><a id="more"></a><h3 id="基本的-form"><a href="#基本的-form" class="headerlink" title="基本的 form"></a>基本的 form</h3><p>最簡單的表單驗證不陌生，只要 form 裡的 input 放個<code>required</code>屬性，那麼觸發 submit 時都會自動檢查該欄位有無填寫，沒有時截斷請求：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在遠古時代，表單是直接丟給後端，讓 server 說 yes or no 的，偶爾看到 php 裡用<code>preg_match()</code>，到前端繼續在 JS 裡用<code>match()</code>。多虧現在瀏覽器良好生態，直接寫在 html 就能做掉了，<strong>只要將 input 包進 form 裡，利用其原生 submit method 自動驗證</strong>。</p><h3 id="type搭配pattern"><a href="#type搭配pattern" class="headerlink" title="type搭配pattern"></a><code>type</code>搭配<code>pattern</code></h3><p>input 本身已有很好用的<code>type</code>屬性，可以是 number, email, date, time 等等，端看需求，基本的驗證功能它都做好了，像是<code>type=&quot;email&quot;</code>就會檢查 <code>@</code> 以及 domain，足以勝任大部分的表單應用。</p><p>若要更進一步規範 input 的內容，就加上 <code>pattern</code> 屬性。只有在 <code>type</code> 為 text, search, tel, url, email, password 時的 input 生效。</p><p>而 <code>pattern</code> 屬性需帶入 <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">Regular Expression (正規表示法)</a>，<a href="https://regexr.com/" target="_blank" rel="noopener">這個網站</a>有教學與練習。</p><h3 id="幾個例子"><a href="#幾個例子" class="headerlink" title="幾個例子"></a>幾個例子</h3><ul><li><p>公司統編</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">pattern</span>=<span class="string">"\d&#123;8&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>至少8位英數的密碼限制</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">pattern</span>=<span class="string">"[a-zA-Z0-9]&#123;8,&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>台灣手機號碼 ( <code>-</code> 號相容)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">pattern</span>=<span class="string">"09\d&#123;2&#125;\-?\d&#123;3&#125;\-?\d&#123;3&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>更多範例與運用可以參考：<a href="http://html5pattern.com" target="_blank" rel="noopener">html5pattern.com</a></p><h3 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input" target="_blank" rel="noopener">MDN</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;新年快樂。恭喜自己又活過了一年。&lt;br&gt;這篇來記一下原生 Html5 就有的網頁表單驗證功能，&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="HTML" scheme="https://yuugou727.github.io/blog/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>[Vue.js] global method 的復用</title>
    <link href="https://yuugou727.github.io/blog/2017/11/25/vue-global-methods/"/>
    <id>https://yuugou727.github.io/blog/2017/11/25/vue-global-methods/</id>
    <published>2017-11-25T06:13:58.000Z</published>
    <updated>2018-11-29T05:18:41.765Z</updated>
    
    <content type="html"><![CDATA[<h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p>我們可能需要為 Vue 專案添加自定義 method，重點是<strong>每個 component 都有可能用到</strong>，有什麼方法可以不用一直複製貼上？</p><a id="more"></a><p>例如原生 JS 操作瀏覽器 cookie 總是很囉唆，可以用幾個 function 包起來用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, expireDays</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">let</span> exdate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">   exdate.setDate(exdate.getDate() + expireDays);</span><br><span class="line">   <span class="built_in">document</span>.cookie = <span class="string">`<span class="subst">$&#123;name&#125;</span>=<span class="subst">$&#123;<span class="built_in">escape</span>(value)&#125;</span>; expires=<span class="subst">$&#123; !expireDays ? <span class="string">''</span></span></span></span><br><span class="line"><span class="string"><span class="subst">     : exdate.toGMTString()&#125;</span>;`</span>;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'(^| )'</span> + name + <span class="string">'=([^;]*)(;|$)'</span>),</span><br><span class="line">     arr = <span class="built_in">document</span>.cookie.match(reg);</span><br><span class="line">   <span class="keyword">return</span> arr ? arr[<span class="number">2</span>] : <span class="literal">null</span>;</span><br><span class="line"> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delCookie</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">let</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">   exp.setTime(exp.getTime() - <span class="number">1</span>);</span><br><span class="line">   <span class="keyword">const</span> value = getCookie(name);</span><br><span class="line">   <span class="keyword">if</span> (value != <span class="literal">null</span>)</span><br><span class="line">     <span class="built_in">document</span>.cookie = <span class="string">`<span class="subst">$&#123;name&#125;</span>=<span class="subst">$&#123;value&#125;</span>; expires=<span class="subst">$&#123;exp.toGMTString()&#125;</span>`</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>看來可以當 Vue method 了，但難道我一個 component 用到一次就要再寫一次嗎？直覺想到ES6的<code>import</code>好像有辦法用，那要如何跟 Vue instance 好好合作呢？</p><h1 id="寫成-Mixins"><a href="#寫成-Mixins" class="headerlink" title="寫成 Mixins"></a>寫成 <a href="https://vuejs.org/v2/guide/mixins.html" target="_blank" rel="noopener">Mixins</a></h1><p>Mixins 能提供 Vue instance 屬性定義的復用。若 component 的 method 與 mixin 的衝突，會以 component 為主。</p><blockquote><p>Mixins 不只能混入 method，還包括 data, lifecycle-hook 等其他屬性，但 merge 後的行為不盡相同，像是<code>created()</code>mixin 後比較像堆疊而不是覆寫，有興趣可以<a href="(https://vuejs.org/v2/guide/mixins.html">翻翻文件</a></p></blockquote><p>建立一個 <code>export</code> object 的 js 檔，把自定義 method 寫入 <code>methods</code> 屬性裡：</p><figure class="highlight js"><figcaption><span>cookieMixin.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> cookieMixin = &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setCookie: <span class="function"><span class="keyword">function</span>(<span class="params">name, value, expireDays</span>)</span>&#123; ... &#125;,</span><br><span class="line">    getCookie: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123; ... &#125;,</span><br><span class="line">    delCookie: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123; </span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">const</span> value = <span class="keyword">this</span>.getCookie(name);</span><br><span class="line">      ...</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在-component-使用-mixin"><a href="#在-component-使用-mixin" class="headerlink" title="在 component 使用 mixin"></a>在 component 使用 mixin</h2><p>只要引入 js 檔並用Array assign 給 <code>mixins</code> 屬性：</p><figure class="highlight js"><figcaption><span>ComponentA.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;cookieMixin&#125; <span class="keyword">from</span> <span class="string">'cookieMixin.js'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  mixins: [cookieMixin],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如此這個 component 便能使用 <code>this.setCookie()</code>等 method。</p><h2 id="Global-mixin"><a href="#Global-mixin" class="headerlink" title="Global mixin"></a>Global mixin</h2><p>若想在每一個 component 中引用，不用每個文件都寫個 <code>import</code>，而是直接在入口 JS 文件定義：</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;cookieMixin&#125; <span class="keyword">from</span> <span class="string">'cookieMixin.js'</span></span><br><span class="line">Vue.mixin(cookieMixin);</span><br></pre></td></tr></table></figure><blockquote class="pullquote tip"><p>注意 global mixin 會影響所有Vue instance，包括第三方引入的 component，用於 data 或 lifecycle-hook 更是要謹慎設計。</p></blockquote><h1 id="使用Vue-prototype"><a href="#使用Vue-prototype" class="headerlink" title="使用Vue.prototype"></a>使用<code>Vue.prototype</code></h1><p>另一種方法，利用JS的原型鏈將自定義 method 掛到 Vue instance上，在入口 JS 文件定義：</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$setCookie = <span class="function"><span class="keyword">function</span>(<span class="params">name, value, expireDays</span>)</span>&#123; ... &#125;,</span><br><span class="line">Vue.prototype.$getCookie = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123; ... &#125;,</span><br><span class="line">Vue.prototype.$delCookie = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="keyword">const</span> value = <span class="keyword">this</span>.$getCookie(name);</span><br><span class="line">  ...</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>如此一來不需要用 <code>mxixns</code>，各 component 也能直接呼叫 <code>this.$setCookie(...)</code></p><blockquote><p>原型鏈上自定義 method 加錢號<code>$</code>的原因，是避免與 component 中 <code>this</code> 所 proxy 的 data, computed, method 等命名空間互衝突，也聲明其特殊性，算是開發潛規則</p></blockquote><p>嗯？錢號？ <code>this.$store</code>…<code>this.$router</code> …<del>うっ、頭が</del></p><img src="https://media.giphy.com/media/YpmVBNubONoqs/giphy.gif" title="https://gph.is/17GnVJm"><p>這種熟悉感不是巧合，Vue 生態系的套件就是以此套路開發的，只是再包成 Vue plugin 使用，寫到這<em>覺得 Vue 真的是很優雅靈活，各種應用游刃有餘又不會賣弄艱澀語法，佩服作者的設計與發揮 JS 特性能力</em>。</p><h1 id="包成-Plugin"><a href="#包成-Plugin" class="headerlink" title="包成 Plugin"></a>包成 <a href="https://vuejs.org/v2/guide/plugins.html" target="_blank" rel="noopener">Plugin</a></h1><p>既然都講到這地步了，乾脆把自定義 method 做成一個 vue-cookie plugin ( Github 真的有<a href="https://github.com/alfhen/vue-cookie" target="_blank" rel="noopener">這個 plugin</a> )</p><p>整理一下 code，其實可以用 object 比較乾淨：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.prototype.$cookie = &#123;</span><br><span class="line">  set: <span class="function"><span class="keyword">function</span>(<span class="params">name, value, expireDays</span>)</span>&#123; ... &#125;,</span><br><span class="line">  get: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123; ... &#125;,</span><br><span class="line">  del: <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123; </span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">const</span> value = <span class="keyword">this</span>.$cookie.get(name);</span><br><span class="line">    ...</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立一個 vue-cookie.js ， <code>export</code> 輸出 <code>install(Vue, options)</code> 這個 function，<code>Vue</code> 作為參數帶入，然後將 method 寫進 <code>install</code> 裡：</p><figure class="highlight js"><figcaption><span>vue-cookie.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install(Vue, options) &#123;</span><br><span class="line">    Vue.prototype.$cookie = &#123; ... &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>入口 js 文件 <code>import</code> 進來就是個 plugin，使用<code>Vue.use</code> 載入 ：</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueCookie <span class="keyword">from</span> <span class="string">'./vue-cookie.js'</span></span><br><span class="line">Vue.use(VueCookie);</span><br></pre></td></tr></table></figure><p>就能在 App 中使用 <code>this.$cookie.set()</code> 了。搞不好能放到 npm 給別人用呢~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;情境&quot;&gt;&lt;a href=&quot;#情境&quot; class=&quot;headerlink&quot; title=&quot;情境&quot;&gt;&lt;/a&gt;情境&lt;/h2&gt;&lt;p&gt;我們可能需要為 Vue 專案添加自定義 method，重點是&lt;strong&gt;每個 component 都有可能用到&lt;/strong&gt;，有什麼方法可以不用一直複製貼上？&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://yuugou727.github.io/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://yuugou727.github.io/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>[Vue.js] 簡單登入頁面路由part2</title>
    <link href="https://yuugou727.github.io/blog/2017/11/14/vue-login-practice-2/"/>
    <id>https://yuugou727.github.io/blog/2017/11/14/vue-login-practice-2/</id>
    <published>2017-11-14T14:50:35.000Z</published>
    <updated>2018-11-29T05:18:41.765Z</updated>
    
    <content type="html"><![CDATA[<p>延續<a href="/blog/2017/11/11/vue-login-practice/" title="上一篇">上一篇</a>的 code，接著最關鍵的登入驗證邏輯與相關功能。</p><a id="more"></a><h1 id="登入狀態驗證"><a href="#登入狀態驗證" class="headerlink" title="登入狀態驗證"></a>登入狀態驗證</h1><p>其實就是處理各種 token 的情況，試想一下：</p><ul><li>登入成功，配發 token 給 user 保存</li><li>各路由間檢查 user 的 token，失敗時就重導向登入頁並刪除 token</li><li>token 無誤不影響 routing</li><li>登出時刪除 token</li></ul><h2 id="Token處理"><a href="#Token處理" class="headerlink" title="Token處理"></a>Token處理</h2><p>首先寫<code>Login.vue</code>的 login method，驗證一組簡單帳號密碼 abcd 跟 1234:</p><figure class="highlight js"><figcaption><span>Login.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  login()&#123;</span><br><span class="line">    <span class="comment">//write login authencation logic here!</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="keyword">this</span>.userName == <span class="string">'abcd'</span> &amp;&amp; <span class="keyword">this</span>.password == <span class="string">'1234'</span> )&#123;</span><br><span class="line">      localStorage.setItem(<span class="string">'token'</span>, <span class="string">'ImLogin'</span>)</span><br><span class="line">      <span class="keyword">this</span>.$router.push(<span class="string">'/'</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">      alert(<span class="string">'login failed'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>登入成功便寫入 localStorage 名為<code>token</code>值為<code>ImLogin</code>的 pair，之後只要檢查它就好。一般 token 會存在 cookie中，特性是能支援同網域下共用以及設定過期失效，這裡偷懶就用了 localStorage 玩玩。</p><p>同時 Header 的登出也要記得刪除 token 的動作：</p><figure class="highlight js"><figcaption><span>Header.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  logout()&#123;</span><br><span class="line">    localStorage.removeItem(<span class="string">'token'</span>);</span><br><span class="line">    <span class="keyword">this</span>.$router.push(<span class="string">'/login'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="檢查哨"><a href="#檢查哨" class="headerlink" title="檢查哨"></a>檢查哨</h2><p>為了讓 user 不管造訪哪一頁都要先驗證 token，只要在<code>main.js</code>裡替 router 物件加個<code>beforeEach</code>的 hook，裡面寫好驗證邏輯，就能實現造訪各路由的檢查：</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> isLogin = localStorage.getItem(<span class="string">'token'</span>) == <span class="string">'ImLogin'</span> ;</span><br><span class="line">  <span class="keyword">if</span>( isLogin )&#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>( to.path !== <span class="string">'/login'</span>)</span><br><span class="line">      next(<span class="string">'/login'</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      next();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>其中非登入狀態的情況，要多定義一層 if else 判斷當前路由是否就在 <code>/login</code> 那頁再做導向，少做這層會不斷被導往 <code>/login</code> 直到 stack 炸掉…</p><p><code>beforeEach</code> 算是 global 的檢查點，vue-router 也提供<code>beforeRouteEnter</code>等 hook 給 component 使用，<a href="https://router.vuejs.org/en/advanced/navigation-guards.html" target="_blank" rel="noopener">參考這裡</a>。 </p><h2 id="您撥的號碼是空號"><a href="#您撥的號碼是空號" class="headerlink" title="您撥的號碼是空號"></a>您撥的號碼是空號</h2><p>最後在<code>route.js</code>多加上這段定義，讓不存在或錯誤的路由不會再是 404，自動導向回根路徑，也能防止人亂 try 結構：</p><figure class="highlight js"><figcaption><span>routes.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path: <span class="string">'*'</span>,</span><br><span class="line">  redirect: <span class="string">'/'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h1><p>手動測看看登入系統，沒登入時永遠只會導回登入頁，就算直接輸入<code>/userInfo</code>也一樣。而只要有登入過，沒按登出前都能正常訪問，不用再重打。</p><img src="https://media.giphy.com/media/d2Z4rTi11c9LRita/giphy.gif" title="http://gph.is/1MREIg9"><p>完整的 code 都放在<a href="https://github.com/yuugou727/vue-simple-login-template" target="_blank" rel="noopener">Github上</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;延續&lt;a href=&quot;/blog/2017/11/11/vue-login-practice/&quot; title=&quot;上一篇&quot;&gt;上一篇&lt;/a&gt;的 code，接著最關鍵的登入驗證邏輯與相關功能。&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://yuugou727.github.io/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://yuugou727.github.io/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>[Vue.js] 簡單登入頁面路由part1</title>
    <link href="https://yuugou727.github.io/blog/2017/11/11/vue-login-practice/"/>
    <id>https://yuugou727.github.io/blog/2017/11/11/vue-login-practice/</id>
    <published>2017-11-11T06:56:15.000Z</published>
    <updated>2018-11-29T05:18:41.765Z</updated>
    
    <content type="html"><![CDATA[<p>入行至今也一段時間啦，雖不是多坎坷但也沒順遂到哪去，踩坑、debug、體驗純靠北工程師上的各種職場鳥事，導致 blog 呈現半放置狀態<del>都是藉口</del>。</p><p>回到正題，用 Vue.js 前端框架的理由很多，大概可以另外寫一篇騙文章數，是最近替公司後台頁面做重構，有機會用上現代框架，藉此寫一下開發流程，也讓這裡少長些草。</p><a id="more"></a><img src="https://media.giphy.com/media/PFXVZdVLS1WEM/giphy.gif" title="https://gph.is/1UOY0na"><h1 id="搭一個Vue-app"><a href="#搭一個Vue-app" class="headerlink" title="搭一個Vue app"></a>搭一個Vue app</h1><h2 id="使用-vue-cli"><a href="#使用-vue-cli" class="headerlink" title="使用 vue-cli"></a>使用 vue-cli</h2><p>Vue.js 官方提供快速搭建工具 <a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">vue-cli</a>，類似 React.js 的 creat-react-app，Github 上安裝與設定文檔寫得很清楚就不贅述，設定集個人是偏好較乾淨快速、有需求套件自己再裝的<code>webpack-simple</code>。小黑窗輸入<code>vue init webpack-simple login</code> 建立一個叫做 login 的專案資料夾，再安裝完裡面的套件後就能用<code>npm run dev</code> 讓他跑起來<del>跑起來</del>。</p><h1 id="架構"><a href="#架構" class="headerlink" title="架構"></a>架構</h1><p>先簡單規劃一下頁面流程：</p><ul><li>使用者會到 login 頁進行登入</li><li>登入成功後進到主畫面</li><li>主畫面包含 header 導航列，能切換主頁與使用者資訊頁，與一個登出鈕</li></ul><h2 id="拆分component"><a href="#拆分component" class="headerlink" title="拆分component"></a>拆分component</h2><p>Vue.js 很大的優點就是能將頁面 UI 元件模組化。<strong>一頁一檔、維護有方</strong>。由以上需求，我們在<code>/src</code>資料夾下建一個<code>/components</code>資料夾，裡面建立各頁面的 vue 檔長這樣：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">└ components</span><br><span class="line">  ├ Login.vue</span><br><span class="line">  ├ Header.vue</span><br><span class="line">  ├ Home.vue</span><br><span class="line">  └ UserInfo.vue</span><br></pre></td></tr></table></figure><p>而在單頁應用SPA，達成這些頁面的切換就是路由的範疇，是該 vue-router 出場了。</p><h2 id="路由必備-vue-router"><a href="#路由必備-vue-router" class="headerlink" title="路由必備 vue-router"></a>路由必備 vue-router</h2><p>vue 官方提供 <a href="https://github.com/vuejs/vue-router" target="_blank" rel="noopener">vue-router</a>(<a href="https://router.vuejs.org/" target="_blank" rel="noopener">文件</a>) 幫助我們實現 routing ，安裝成專案的 dependency：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-router -s</span><br></pre></td></tr></table></figure><h3 id="定義路由"><a href="#定義路由" class="headerlink" title="定義路由"></a>定義路由</h3><p>個人傾向將路由規則獨立一個檔案管理，在<code>/src</code>資料夾下新建一個 <code>routes.js</code>。裡面先寫好簡單的兩個路由：</p><figure class="highlight js"><figcaption><span>routes.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'./components/Login.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home.vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    component: Login</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    component: Home</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><blockquote><p>這段想寫在<code>main.js</code>裡也行，只要讓 router 帶入正確的 routes array 就好，這裡只是 export 出來</p></blockquote><p>將<code>main.js</code>改成：</p><figure class="highlight js"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; routes &#125; <span class="keyword">from</span> <span class="string">'./routes'</span> <span class="comment">//路由規則</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">'history'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>vue-router 預設使用 # 字模擬 anchor 的 url 導向方式，避免整頁刷新，這裡改成 history mode 以呈現乾淨的 url path，相應的 server 端也必須設定總是回應<code>index.html</code>的內容，以避免導向錯誤，可以參考<a href="https://router.vuejs.org/en/essentials/history-mode.html" target="_blank" rel="noopener">文件</a></p></blockquote><h1 id="所見所得"><a href="#所見所得" class="headerlink" title="所見所得"></a>所見所得</h1><p>將<code>App.vue</code>中頁面加入<code>&lt;router-view&gt;</code>，路由規則定義的 component 將會 mount 在上面：</p><figure class="highlight html"><figcaption><span>App.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'app'</span>,</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然後簡單的寫一下<code>Home.vue</code>，跑一下<code>npm run dev</code>，應該就能看到 Home 字出現在瀏覽器中：</p><figure class="highlight html"><figcaption><span>Home.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接著編輯登入頁面<code>Login.vue</code></p><figure class="highlight html"><figcaption><span>Login.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Login Page<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>User Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"userName"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">v-model</span>=<span class="string">"password"</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Log In<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        userName: <span class="string">''</span>,</span></span><br><span class="line"><span class="javascript">        password: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      login()&#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">//-- write login authencation logic here! --</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> auth = <span class="literal">true</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>( auth )</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$router.push(<span class="string">'/'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">else</span></span></span><br><span class="line"><span class="javascript">          alert(<span class="string">'login failed'</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125; </span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>v-on 綁定<code>&lt;form&gt;</code>元素的 submit 事件，<code>.prevent</code>後綴防止原生方法產生頁面重整，而改用自定的login method。</p></blockquote><p>手動在網址後打上 <code>/login</code>，就能看到登入表格，利用<code>this.$router.push(&#39;/&#39;)</code>導向至主頁。</p><h1 id="說好的-header-呢"><a href="#說好的-header-呢" class="headerlink" title="說好的 header 呢?"></a>說好的 header 呢?</h1><figure class="highlight html"><figcaption><span>Header.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/userInfo"</span>&gt;</span>User Info<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> @<span class="attr">click.prevent</span>=<span class="string">"logout"</span>&gt;</span>Logout<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      logout()&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$router.push(<span class="string">'/login'</span>);</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>template 的 <code>router-link</code> 會 render 成<code>&lt;a href=&quot;...&quot;&gt;&lt;/a&gt;</code>的超連結，但不會重整頁面，而是改變路由、滑順的 mount 元件上去，SPA 要的就是<strong>這個感覺</strong>。</p><img src="/blog/2017/11/11/vue-login-practice/so_good.jpg"><h2 id="命名-router-view"><a href="#命名-router-view" class="headerlink" title="命名 router-view"></a>命名 router-view</h2><p>可是瑞凡， Header 是只有登入後才會看到的元件，怎麼辦?</p><p>對於路由條件式的掛載元件，簡單的實作是在<code>App.vue</code>，加上另外指定 name 的<code>&lt;router-view&gt;</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"nav"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然後在路由規則裡，把需要 Header 的路由改成 components ( 加個s )並使用物件， key 名將會自動匹配到指定 name 的 router-view，沒指定的會 fallback 至 <code>default</code>。</p><figure class="highlight js"><figcaption><span>routes.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'./components/Login.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Header <span class="keyword">from</span> <span class="string">'./components/Header.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home.vue'</span>;</span><br><span class="line"><span class="keyword">import</span> UserInfo <span class="keyword">from</span> <span class="string">'./components/UserInfo.vue'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/login'</span>,</span><br><span class="line">    component: Login</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/'</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      <span class="keyword">default</span>: Home,</span><br><span class="line">      nav: Header</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">'/userInfo'</span>,</span><br><span class="line">    components: &#123;</span><br><span class="line">      <span class="keyword">default</span>: UserInfo,</span><br><span class="line">      nav: Header</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>順便完成 <code>UserInfo.vue</code>：</p><figure class="highlight html"><figcaption><span>UserInfo.vue</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>UserInfo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>user name:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; userName &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>ID:<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; userId &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    data () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">        userName: <span class="string">'Steven Chou'</span>,</span></span><br><span class="line"><span class="undefined">        userId: 9527,</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="中場休息"><a href="#中場休息" class="headerlink" title="中場休息"></a>中場休息</h1><p>大致完成了半殘的登入系統，各種點擊也能正常作動，但目前直接透過 URL 都能造訪任一個頁面，<del>不用yoyodiy</del>就能繞過登入機制看光光，完全沒卵用。</p><img src="https://media.giphy.com/media/l0OWistc2HUjf6PKM/giphy.gif" title="https://gph.is/1T3YW84"><a href="/blog/2017/11/14/vue-login-practice-2/" title="下一篇">下一篇</a>將繼續實作完整的登入驗證功能]]></content>
    
    <summary type="html">
    
      &lt;p&gt;入行至今也一段時間啦，雖不是多坎坷但也沒順遂到哪去，踩坑、debug、體驗純靠北工程師上的各種職場鳥事，導致 blog 呈現半放置狀態&lt;del&gt;都是藉口&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;回到正題，用 Vue.js 前端框架的理由很多，大概可以另外寫一篇騙文章數，是最近替公司後台頁面做重構，有機會用上現代框架，藉此寫一下開發流程，也讓這裡少長些草。&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://yuugou727.github.io/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://yuugou727.github.io/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Asus VivoTab Note 8 筆感應失效維修DIY</title>
    <link href="https://yuugou727.github.io/blog/2017/09/06/fix-m80ta-touch-pen/"/>
    <id>https://yuugou727.github.io/blog/2017/09/06/fix-m80ta-touch-pen/</id>
    <published>2017-09-06T12:16:05.000Z</published>
    <updated>2018-11-29T05:18:41.760Z</updated>
    
    <content type="html"><![CDATA[<p>自從 2015 年 12 月發現這台附帶 Wacom 觸控筆、跑 Windows 的<strong>平板神器</strong>時它已經停產了，還去批踢踢二手板買一台來玩，心得是真的超值。除了不要太強求 Atom 處理器之外，堪用的感壓筆可以隨手塗鴉， Windows 8 也升上 Windows 10 順跑，搭配藍芽鍵盤就能坐咖啡廳一天了。現在仍是上班的豪夥伴：當第三螢幕查資料、聽 Spotify 玩玩市集等等。</p><h3 id="但該來的總是會該來"><a href="#但該來的總是會該來" class="headerlink" title="但該來的總是會該來"></a>但該來的總是會該來</h3><p>而這台一直有個災情<del>不愧是以卵擊石</del>：<strong>螢幕觸控失效</strong>。而我則是發生<strong>感應筆失效</strong>的問題，背後原因是類似的。</p><p>網友都幫整理好解決方法與教學了，寧願自己來也不送修。<del>看來大家都不太相信SOP只有重灌的皇家</del></p><ul><li><a href="http://katzdx.blogspot.tw/2015/09/asus-vivotab-note-8.html" target="_blank" rel="noopener">Asus VivoTab Note 8 使用一年心得</a></li><li><a href="https://www.plurk.com/p/lan2xk" target="_blank" rel="noopener">https://www.plurk.com/p/lan2xk</a></li></ul><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>網路消息大致都指向軟排線(FFC)走線問題，受到擠壓造成接觸不良。</p><img src="/blog/2017/09/06/fix-m80ta-touch-pen/IMAG0006.jpg"><p>起初也是照著文章做，打開機殼重插排線後，就順利感應到筆了。</p><p>但日後偵測不到的頻率越來越高，讓我懷疑是排線本身因為凹摺造成磨損斷路。乾脆一勞永逸，直接買現成排線來DIY，順便連觸控訊號的排線也一起換。</p><blockquote><img src="/blog/2017/09/06/fix-m80ta-touch-pen/IMAG0005.jpg"><p>DB是感壓筆訊號排線、TB是觸控訊號排線</p></blockquote><h3 id="警告"><a href="#警告" class="headerlink" title="警告"></a>警告</h3><ul><li>DIY有一定風險，沒有信心請委託身邊工具人</li><li>光華地下街有賣拆機工具組會好拆一些</li><li>碰觸精密電路板一定要避免身上靜電</li></ul><h3 id="關鍵材料"><a href="#關鍵材料" class="headerlink" title="關鍵材料"></a>關鍵材料</h3><p>估狗整理了一下軟排線的規格，露天可以買到</p><blockquote><ul><li>FFC-8PIN-0.5-40mm-B</li><li>FFC-10PIN-0.5-50mm-B</li></ul></blockquote><p>其中 8pin 是筆排線DB、 10pin 是觸控排線TB，兩條都是 pin 腳寬度 0.5mm ，且為 <strong>type-B (異面)</strong>，長度越短的越好塞。</p><img src="/blog/2017/09/06/fix-m80ta-touch-pen/IMAG0226.jpg"><h3 id="施工"><a href="#施工" class="headerlink" title="施工"></a>施工</h3><p>然而現成的有個缺點：藍色硬膠片沒有預留長度，沒有施力點可以塞進插槽，跟原廠(上面)的比很明顯。最後也只能用尖嘴鉗輕夾兩側慢慢塞進去…</p><img src="/blog/2017/09/06/fix-m80ta-touch-pen/IMAG0227.jpg"><p>順利插上後，剩餘的長度要小心凹摺兩次讓它好收納，最後怕它在機殼內亂跑，用電工用紙膠帶簡單固定住。</p><img src="/blog/2017/09/06/fix-m80ta-touch-pen/IMAG0222.jpg"><p>成果展示</p><img src="/blog/2017/09/06/fix-m80ta-touch-pen/IMAG0223.jpg"><h3 id="測試結果"><a href="#測試結果" class="headerlink" title="測試結果"></a>測試結果</h3><p>從 2017 年 5 月施工完後至今，觸控與筆皆正常運作頭好壯壯，供熱血工程師魂人士參考。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自從 2015 年 12 月發現這台附帶 Wacom 觸控筆、跑 Windows 的&lt;strong&gt;平板神器&lt;/strong&gt;時它已經停產了，還去批踢踢二手板買一台來玩，心得是真的超值。除了不要太強求 Atom 處理器之外，堪用的感壓筆可以隨手塗鴉， Windows 8 也
      
    
    </summary>
    
      <category term="生活" scheme="https://yuugou727.github.io/blog/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="hardware" scheme="https://yuugou727.github.io/blog/tags/hardware/"/>
    
      <category term="DIY" scheme="https://yuugou727.github.io/blog/tags/DIY/"/>
    
  </entry>
  
  <entry>
    <title>Legacy code 考古筆記</title>
    <link href="https://yuugou727.github.io/blog/2017/08/21/archeology-note/"/>
    <id>https://yuugou727.github.io/blog/2017/08/21/archeology-note/</id>
    <published>2017-08-21T12:22:12.000Z</published>
    <updated>2018-11-29T05:18:41.760Z</updated>
    
    <content type="html"><![CDATA[<p>之前在維護一些2013年的 legacy code 時， console 往往跳一堆警告出來，發現在那 jQuery 大行其道的單純美好年代，有些用法已經被現代瀏覽器認為<del>不潮了</del>要改進了，於是整理一下前人的時代眼淚及符合 modern web 的修正方法，相單契合本網誌大標<strong>歷史共業</strong>，希望以後修舊 code 會少點 debug 時間…</p><a id="more"></a><h3 id="toJSON"><a href="#toJSON" class="headerlink" title="$.toJSON()"></a><code>$.toJSON()</code></h3><p>這是一個<a href="https://github.com/krinkle/jquery-json" target="_blank" rel="noopener">jQuery第三方套件</a>用來將object轉成JSON字串，可能當時只能靠 plugin 處理，但現在JS原生就已內建<code>JSON.stringify()</code>，這應該不用多想了吧。</p><img src="https://media.giphy.com/media/rH7nZf2OlQ1va/giphy.gif" title="http://gph.is/1L6t96R"><h3 id="jQuery-attr"><a href="#jQuery-attr" class="headerlink" title="jQuery .attr()"></a>jQuery <code>.attr()</code></h3><p>若有機會用 jQuery 1.6以上版本，還是盡量改用<code>.prop()</code>吧，參考這兩篇，避免一些預料外的錯誤：</p><ul><li><a href="http://l7960261.blogspot.tw/2014/07/jquery-attr-prop.html" target="_blank" rel="noopener">jQuery 中 attr() 與 prop() 使用區別</a></li><li><a href="http://blog.webgolds.com/view/193" target="_blank" rel="noopener">到底要用ATTR() 還是 PROP() 之間的區別比較</a></li></ul><p>像是 checkbox 如果沒有設置<code>checked</code>，user的對其的操作用<code>.attr()</code>是抓不到的。而<code>.prop()</code>也只能判斷有無圈選，並不知道明確選了幾個，這時 selecor 的後綴就能派上用場：</p><iframe height="300" scrolling="no" title="jQuery attr vs prop" src="//codepen.io/yuugou727/embed/JyLBMw/?height=300&theme-id=28350&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="https://codepen.io/yuugou727/pen/JyLBMw/" target="_blank" rel="noopener">jQuery attr vs prop</a> by Ronnie (<a href="https://codepen.io/yuugou727" target="_blank" rel="noopener">@yuugou727</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</iframe><h3 id="jQuery-bind-與-delegate"><a href="#jQuery-bind-與-delegate" class="headerlink" title="jQuery .bind() 與 .delegate()"></a>jQuery <code>.bind()</code> 與 <code>.delegate()</code></h3><p>為不同實作細節的<strong>事件綁定 function</strong>，但在3.0版之後都被棄用了，取而代之的是<a href="http://blog.jquery.com/2011/11/03/jquery-1-7-released/" target="_blank" rel="noopener">1.7版就有的</a> <code>.on()</code>跟<code>.off()</code>，可以看<a href="http://www.cnblogs.com/moonreplace/archive/2012/10/09/2717136.html" target="_blank" rel="noopener">這篇差異剖析</a>解釋得很清楚。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//bind</span></span><br><span class="line">$(<span class="string">'a'</span>).bind(<span class="string">'click'</span>, myHandler);</span><br><span class="line">$(<span class="string">'a'</span>).on(<span class="string">'click'</span>, myHandler);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'form'</span>).bind(<span class="string">'submit'</span>, &#123; <span class="attr">val</span>: <span class="number">42</span> &#125;, fn);</span><br><span class="line">$(<span class="string">'form'</span>).on(<span class="string">'submit'</span>, &#123; <span class="attr">val</span>: <span class="number">42</span> &#125;, fn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//delegate</span></span><br><span class="line">$(<span class="string">'.comment'</span>).delegate(<span class="string">'a.add'</span>, <span class="string">'click'</span>, addNew); </span><br><span class="line">$(<span class="string">'.comment'</span>).on(<span class="string">'click'</span>, <span class="string">'a.add'</span>, addNew);</span><br></pre></td></tr></table></figure><h3 id="lt-a-id-quot-btn-add-quot-class-quot-btn-quot-href-quot-quot-onclick-quot-add-quot-gt"><a href="#lt-a-id-quot-btn-add-quot-class-quot-btn-quot-href-quot-quot-onclick-quot-add-quot-gt" class="headerlink" title="&lt;a id=&quot;btn_add&quot; class=&quot;btn&quot; href=&quot;#&quot; onclick=&quot;add()&quot;&gt;"></a><code>&lt;a id=&quot;btn_add&quot; class=&quot;btn&quot; href=&quot;#&quot; onclick=&quot;add()&quot;&gt;</code></h3><p>通常是用 Bootstrap，為了做顆按鈕只用來觸發事件不導向，只是按了以後 url 就多了<code>#</code>，長網頁還會跳回最上面，為什麼不用<code>&lt;button&gt;</code>呢…</p><p>要讓它不導向，除了常用的<code>href=&quot;javascript:void(0)&quot;</code>，還有另一種直接在 event handler 裡小修改：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  e.preventDefault(); <span class="comment">//防止&lt;a&gt;的預設(導向)行為 </span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 或是於最後回傳false( 兩者選一，這行適合不需回傳的 function )</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在維護一些2013年的 legacy code 時， console 往往跳一堆警告出來，發現在那 jQuery 大行其道的單純美好年代，有些用法已經被現代瀏覽器認為&lt;del&gt;不潮了&lt;/del&gt;要改進了，於是整理一下前人的時代眼淚及符合 modern web 的修正方法，相單契合本網誌大標&lt;strong&gt;歷史共業&lt;/strong&gt;，希望以後修舊 code 會少點 debug 時間…&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://yuugou727.github.io/blog/tags/JavaScript/"/>
    
      <category term="jQuery" scheme="https://yuugou727.github.io/blog/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>搬來用 github.io + Hexo</title>
    <link href="https://yuugou727.github.io/blog/2017/08/14/github-io-hexo/"/>
    <id>https://yuugou727.github.io/blog/2017/08/14/github-io-hexo/</id>
    <published>2017-08-14T15:24:27.000Z</published>
    <updated>2018-11-29T05:18:41.760Z</updated>
    
    <content type="html"><![CDATA[<p>總之還是把文章先搬過來了，<del>舊的直接放生</del>。</p><a id="more"></a><p>攻城屍總是有股對技術的掌控慾，連寫個網誌都不屑用一般平台，非要自己從架站到設計一條龍。常看的各大大技術網誌也多是自架，自成一格次文化，算是技術人的桀傲不遜嗎？<del>放在 Blogger、X客幫太沒技術含量喇，自己寫 code 架站才是<strong>尊爵不凡</strong></del>。</p><p>話雖如此，菜鳥還不想作死，先從最平易近人的 github 空間 + <a href="https://hexo.io" target="_blank" rel="noopener">Hexo</a> blog framewrok 這組合開始上手，Hexo 開發文件完善、網路上不少<a href="https://wwssllabcd.github.io/blog/2014/12/22/how-to-install-hexo/" target="_blank" rel="noopener">前人整理筆記</a>、豐富資源根本佛心，話說 Hexo 當時是位高三學生開發出來的（<a href="https://zespia.tw/blog/2012/10/11/hexo-debut/" target="_blank" rel="noopener">朝聖</a>）人家藤原拓海18歲時就開 AE86 輾爆各地<del>我在騙自己考大學</del>。</p><p>換作跑 AWS 之類的方案，光弄網域路由之類的就太吐血了，會管主機的話…</p><img src="/blog/2017/08/14/github-io-hexo/jojo.jpg"><h3 id="工商服務"><a href="#工商服務" class="headerlink" title="工商服務"></a>工商服務</h3><p>中間還花了一些時間找喜歡的主題，最後是 fork 別人的 fork 又給它亂改，因此學會了些 Pug(Jade)、 Grunt.js 跟 SASS 的皮毛，小有收穫，結果就是<a href="https://github.com/yuugou727/hexo-theme-artemis" target="_blank" rel="noopener">這裡套用的主題</a>，歡迎取用。</p><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>用 markdown 寫作 hen 爽快，主題 layout 樣式會改就改很自由，編譯快又輕量，原主題還整合了 GA、Disqus，也有 plugin 做 RSS/Atom feed，完整的網誌一次到位。缺點就是 repo 存在一台電腦上，不能隨時隨地雲端更新發布之類的，只能買個 private repo 同步存放解決吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;總之還是把文章先搬過來了，&lt;del&gt;舊的直接放生&lt;/del&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="Hexo" scheme="https://yuugou727.github.io/blog/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>[Vue.js] data為Object或Array時的淺拷貝特性</title>
    <link href="https://yuugou727.github.io/blog/2017/07/23/vue-data-is-object-or-array/"/>
    <id>https://yuugou727.github.io/blog/2017/07/23/vue-data-is-object-or-array/</id>
    <published>2017-07-23T05:36:16.000Z</published>
    <updated>2018-11-29T05:18:41.759Z</updated>
    
    <content type="html"><![CDATA[<p>其實應該不限於 Vue，這是 JavaScript 語言的基礎特性，怪我不用功越級打怪就一直在還債QQ</p><a id="more"></a><h3 id="案發經過"><a href="#案發經過" class="headerlink" title="案發經過"></a>案發經過</h3><p>使用 Vue 的<code>computed</code>屬性實作一些驗算 function ，僅是對 data 物件裡的某個 array 作 forEach 另存，竟會影響到原本的 data，就算切成 component 使用 props 傳值也一樣。跟之前用 React ，傳值的表現完全不同。</p><p>然後就翻到 Vue 的<a href="https://vuejs.org/v2/guide/components.html#One-Way-Data-Flow" target="_blank" rel="noopener">文檔</a>，明確告知要注意：</p><blockquote class="pullquote tip"><p>Note that objects and arrays in JavaScript are passed by reference, so if the prop is an array or object, mutating the object or array itself inside the child will affect parent state. </p></blockquote><h1 id="JS的資料型別"><a href="#JS的資料型別" class="headerlink" title="JS的資料型別"></a>JS的資料型別</h1><p>參考<a href="https://www.slideshare.net/YiTaiLin/java-script-63031051" target="_blank" rel="noopener">簡單介紹JavaScript參數傳遞</a></p><p>JavaScript 中，原始型別 (primitive type) 如 <code>string</code>, <code>number</code>, <code>boolean</code> 這些只有<strong>純值</strong>而沒有其他 method 的資料，當我們將一個變數參照至它時，這個變數的記憶體會寫入一樣的 value ，也就是 <strong>by value</strong> 的傳值方式，如同複製光線這很直覺：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'I am a string'</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b = <span class="string">'change this'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a, b); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">"I am a string" "change this"</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>而 <code>object</code> ( <code>array</code> , <code>function</code> 在JS中也是 <code>object</code> ) 這類資料的傳值方式則是 <strong>by reference</strong> 。當我們用一個變數參照至它時，這個變數並不會另存一個一樣的 object ，而是存一個指標，指向原本 object 在<strong>記憶體上的 address</strong>，因此我們以為有兩個長得一樣但不相干的 object，實際上卻是像<strong>捷徑</strong>讓參照過它的變數都會連到同一個 object，稱為淺拷貝，然後就在修改它的時候產生<strong>認知失調</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objA = &#123; <span class="attr">words</span>: <span class="string">'I am a string'</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> objB = objA;</span><br><span class="line">objB.words = <span class="string">'change this'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(objA, objB); </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Object &#123;</span></span><br><span class="line"><span class="comment">  words: "change this"</span></span><br><span class="line"><span class="comment">&#125; Object &#123;</span></span><br><span class="line"><span class="comment">  words: "change this"</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><img src="/blog/2017/07/23/vue-data-is-object-or-array/stand-attack.jpg"><blockquote><p>其實就跟替身受傷，本人會跟著受傷是一樣的。</p></blockquote><h3 id="暴力破解"><a href="#暴力破解" class="headerlink" title="暴力破解"></a>暴力破解</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cloned_array = <span class="built_in">JSON</span>.parse( <span class="built_in">JSON</span>.stringify(arrayData) );</span><br></pre></td></tr></table></figure><p>用Json互轉能達成深拷貝，不過例外是 function 無法被轉換。function 在 JavaScript 國是一等公民、是個 object，可是 json 國不承認，就把它給消失惹。而且互轉似乎很耗效能，但對我目前只處理一組Array的情況是足夠了。</p><p>更多好的深拷貝方法可以看看這篇<a href="http://larry850806.github.io/2016/09/20/shallow-vs-deep-copy/" target="_blank" rel="noopener">網路大大寫的淺拷貝與深拷貝</a>，解釋得很詳盡。jQuery 有 <code>$.extend()</code> ，lodash 有 <code>_.cloneDeep</code> 可以用。</p><h3 id="所以那個React"><a href="#所以那個React" class="headerlink" title="所以那個React"></a>所以那個React</h3><p>React 的 prop 傳值行為，標準的父傳子，子不影響父，猜測應該中間就處理好了深拷貝。Vue 實例內部是靠 <code>this.someData</code> 賦值，傳 array 或 object 一定是 pass by reference，作解耦要嘛子元件接 prop 進來時深拷貝一次，或是父元件用深拷貝過的data 傳給 prop 。</p><p>似乎也有用單一組件直接管理、傳送所有深拷貝過的 Data 的作法，<del>啊那不就是 flux 架構？</del> 等 code 有大到需要用 Redux、Vuex 再說啦…</p><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><a href="https://forum.vuejs.org/t/props-are-mutable-when-passed-as-an-object/2525/4" target="_blank" rel="noopener">Props are mutable when passed as an Object</a></li><li><a href="https://github.com/vuejs/vue/issues/2863" target="_blank" rel="noopener">动态props传递数组默认是双向绑定？</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其實應該不限於 Vue，這是 JavaScript 語言的基礎特性，怪我不用功越級打怪就一直在還債QQ&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://yuugou727.github.io/blog/tags/JavaScript/"/>
    
      <category term="Vue.js" scheme="https://yuugou727.github.io/blog/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>Webpack使用Bootstrap 4 (alpha-6版)</title>
    <link href="https://yuugou727.github.io/blog/2017/06/15/webpack-bootstrap-4/"/>
    <id>https://yuugou727.github.io/blog/2017/06/15/webpack-bootstrap-4/</id>
    <published>2017-06-15T08:31:23.000Z</published>
    <updated>2018-11-29T05:18:41.758Z</updated>
    
    <content type="html"><![CDATA[<img src="/blog/2017/06/15/webpack-bootstrap-4/webpack+bs.png"><a id="more"></a><p>想在使用 webpack 的專案中加入 Bootstrap 4 要懂些眉角，前提是已經了解 npm, webpack 是什麼<del>不然就不會搜到這篇</del>。</p><blockquote class="pullquote tip"><p><strong>2017/09/04附註</strong></p><p>Bootstrap 4 beta 版已經<a href="https://getbootstrap.com/" target="_blank" rel="noopener">上線</a>了，document 比起 alpha 版真的完善許多，還有一頁<a href="https://getbootstrap.com/docs/4.0/getting-started/webpack/" target="_blank" rel="noopener">教你怎麼導入webpack</a>，似乎是用 popper.js 取代了 tether.js，之後這篇應該也沒啥參考價值了，直接用 beta 吧！</p></blockquote><p>在專案資料夾內使用 npm 安裝最新版 BS，jquery 是其依賴也要確認</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install bootstrap@4.0.0-alpha.6 --save</span><br><span class="line">$ npm install jquery --save</span><br></pre></td></tr></table></figure><p>在 entry 的 js 檔案開頭加入此行引入BS:</p><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'bootstrap'</span>;</span><br></pre></td></tr></table></figure><h3 id="引入樣式"><a href="#引入樣式" class="headerlink" title="引入樣式"></a>引入樣式</h3><ul><li>作法一: 在入口 JS 檔案引入</li></ul><figure class="highlight js"><figcaption><span>index.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'bootstrap/dist/css/bootstrap.css'</span>;</span><br></pre></td></tr></table></figure><ul><li>作法二: 在自己的 sass 檔裡引入</li></ul><figure class="highlight css"><figcaption><span>style.sass</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">"~bootstrap/scss/bootstrap.scss"</span>;</span><br></pre></td></tr></table></figure><p>這裡用前綴波浪符 <code>~</code> 指向node_modules，因為 CSS/Sass 並不像 JS 能解析載入依賴檔案。</p><blockquote><p>Writing <code>@import &quot;file&quot;</code> is the same as <code>@import &quot;./file&quot;</code></p></blockquote><h3 id="webpack編譯時的變數對應"><a href="#webpack編譯時的變數對應" class="headerlink" title="webpack編譯時的變數對應"></a>webpack編譯時的變數對應</h3><p>接著在 <code>webpack.config.js</code> 裡的 plugins 加入 <code>ProvidePlugin</code> 指定遇到相關變數時要引入的 package</p><figure class="highlight js"><figcaption><span>webpack.config.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">  $: <span class="string">'jquery'</span>,</span><br><span class="line">  jQuery: <span class="string">'jquery'</span>,</span><br><span class="line">  <span class="string">'window.jQuery'</span>: <span class="string">'jquery'</span>,</span><br><span class="line">  Tether: <span class="string">'tether'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="參考資料"><a href="#參考資料" class="headerlink" title="參考資料"></a>參考資料</h1><ul><li><p><a href="https://github.com/twbs/bootstrap/issues/22196" target="_blank" rel="noopener">https://github.com/twbs/bootstrap/issues/22196</a></p></li><li><p><a href="https://github.com/webpack-contrib/sass-loader#imports" target="_blank" rel="noopener">https://github.com/webpack-contrib/sass-loader#imports</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/blog/2017/06/15/webpack-bootstrap-4/webpack+bs.png&quot;&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="Bootstrap" scheme="https://yuugou727.github.io/blog/tags/Bootstrap/"/>
    
      <category term="Webpack" scheme="https://yuugou727.github.io/blog/tags/Webpack/"/>
    
      <category term="jQuery" scheme="https://yuugou727.github.io/blog/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>取得svg裡的path節點</title>
    <link href="https://yuugou727.github.io/blog/2017/06/12/access-svg-path/"/>
    <id>https://yuugou727.github.io/blog/2017/06/12/access-svg-path/</id>
    <published>2017-06-12T10:23:13.000Z</published>
    <updated>2018-11-29T05:18:41.758Z</updated>
    
    <content type="html"><![CDATA[<p>網頁中使用<code>&lt;object&gt;</code> tag 載入 svg 檔案的寫法長這樣:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">"image/svg+xml"</span> <span class="attr">data</span>=<span class="string">"myFile.svg"</span> <span class="attr">id</span>=<span class="string">"myObj"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果我們想用 JS 取得 svg 裡的<code>&lt;path&gt;</code> 節點呢?</p><a id="more"></a><p>首先，<code>&lt;object&gt;&lt;/object&gt;</code>裡的 svg 檔案是在 html 被解析完才載入的， 所以必須寫在這個 object 的 load 事件:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = <span class="built_in">document</span>.getElementById(<span class="string">'myObj'</span>); </span><br><span class="line">    myObj.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>那再來就是用<code>getElemetsByTagName()</code>去抓 path 嘛? 如果這麼單純我就不會寫這篇筆記了…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = <span class="built_in">document</span>.getElementById(<span class="string">'myObj'</span>); </span><br><span class="line">    myObj.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> paths = myObj.getElementsByTagName(<span class="string">'path'</span>); </span><br><span class="line">        <span class="built_in">console</span>.log(paths); <span class="comment">// []</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><img src="https://media.giphy.com/media/GdWZJHPjYmDTy/giphy.gif"><p>結果抓到的是<strong>空陣列</strong>，怎麼會這樣?</p><p>用 Chrome devTool 檢查網頁結構，發現在<code>&lt;object&gt;&lt;/object&gt;</code>tag 中，與 <code>&lt;svg&gt;&lt;/svg&gt;</code>tag還隔著一層<code>#document</code>wrap像這樣:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">"image/svg+xml"</span> <span class="attr">data</span>=<span class="string">"myFile.svg"</span> <span class="attr">id</span>=<span class="string">"myObj"</span>&gt;</span></span><br><span class="line">    #document</span><br><span class="line">        <span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line">            ...</span><br><span class="line">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">object</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就是因為中間那層 document ，object 還需要透過 <strong><code>contentDocument</code></strong> 屬性才能訪問其中的節點:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myObj = <span class="built_in">document</span>.getElementById(<span class="string">'myObj'</span>); </span><br><span class="line">    myObj.addEventListener(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> paths = myObj.contentDocument.getElementsByTagName(<span class="string">'path'</span>); </span><br><span class="line">        <span class="built_in">console</span>.log(paths); <span class="comment">// (N) [path#A, path#B , ...]</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>如此便能成功獲取我們要的 path ，可喜可賀。 </p><h3 id="靠北的有趣的地方"><a href="#靠北的有趣的地方" class="headerlink" title="靠北的有趣的地方"></a><del>靠北的</del>有趣的地方</h3><p>如果我們重新整理頁面，在 console 直接輸入 <code>document.getElementsByTagName(&#39;path&#39;)</code> 也是傳回空陣列；但如果滑鼠右鍵直接點在我們的 svg 上檢查 ，再重新輸入一次 <code>document.getElementsByTagName(&#39;path&#39;)</code> 卻能正確回傳所有的 path 節點陣列。</p><h3 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h3><p>就是一個 window 裡有多個 document 的概念，跟 iframe 有九成像， document 還會隨著 client scope 而變，依靠 document 並不是好的抓取 svg 方式。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;網頁中使用&lt;code&gt;&amp;lt;object&amp;gt;&lt;/code&gt; tag 載入 svg 檔案的寫法長這樣:&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;image/svg+xml&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;data&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myFile.svg&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;myObj&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;object&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;如果我們想用 JS 取得 svg 裡的&lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; 節點呢?&lt;/p&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://yuugou727.github.io/blog/tags/JavaScript/"/>
    
      <category term="svg" scheme="https://yuugou727.github.io/blog/tags/svg/"/>
    
  </entry>
  
  <entry>
    <title>判別造訪網頁裝置的OS</title>
    <link href="https://yuugou727.github.io/blog/2017/05/28/access-web-OS/"/>
    <id>https://yuugou727.github.io/blog/2017/05/28/access-web-OS/</id>
    <published>2017-05-28T08:40:10.000Z</published>
    <updated>2018-11-29T05:18:41.758Z</updated>
    
    <content type="html"><![CDATA[<h3 id="window-navigator-userAgent"><a href="#window-navigator-userAgent" class="headerlink" title="window.navigator.userAgent"></a><code>window.navigator.userAgent</code></h3><p>實務上有判別造訪網頁是哪家OS的需求，可以用這支API來判定，<a id="more"></a> Chrome 打開 devTool 在console 輸入 :</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.navigator.userAgent</span><br></pre></td></tr></table></figure><p>在我的windows電腦上的結果是:</p><p><code>&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&quot;</code></p><p>裡面紀錄了很多東西，甚至連瀏覽器版本都有寫，由此我們只要對字串作 <code>.match()</code> 或寫個 RegExp 去 <code>.test()</code> 這個字串就能判別。</p><h3 id="那行動裝置OS長怎樣"><a href="#那行動裝置OS長怎樣" class="headerlink" title="那行動裝置OS長怎樣?"></a>那行動裝置OS長怎樣?</h3><p>其實 Chrome devTool 很強大，在開啟時點選左上角 toggle device toolbar 按鈕，就會出現各裝置螢幕的模擬畫面，選單提供常用的裝置，起初以為只有單純模擬螢幕解析度，試了一下發現連 OS 資訊都模擬了…</p><p>如果我選擇 iphone 6 ，那麼 <code>window.navigator.userAgent</code> 結果就是:<br><code>&quot;Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1&quot;</code></p><p>iPad:<br><code>&quot;Mozilla/5.0 (iPad; CPU OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1&quot;</code></p><p>Android (Nexus 6P):<br><code>&quot;Mozilla/5.0 (Linux; Android 5.1.1; Nexus 6 Build/LYZ28E) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Mobile Safari/537.36&quot;</code></p><p>照著顯示的字串，我們只要過濾 OS 、裝置名稱就好，至於詳細方法、與什麼是 AppleWebkit，可以參考下面連結。</p><h3 id="參考連結"><a href="#參考連結" class="headerlink" title="參考連結"></a>參考連結</h3><ul><li><a href="https://stackoverflow.com/questions/21741841/detecting-ios-android-operating-system" target="_blank" rel="noopener">https://stackoverflow.com/questions/21741841/detecting-ios-android-operating-system</a></li><li><a href="https://hsinyu00.wordpress.com/2011/04/05/mobile-web-user-agent-sniffing/" target="_blank" rel="noopener">Mobile Web 前端技術筆記(三): User Agent Sniffing</a></li><li><a href="https://yulun.me/2013/mozilla5-0-always-user-agent-string/" target="_blank" rel="noopener">為什麼瀏覽器 user-agent string 總是包含 Mozilla/5.0 ?</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;window-navigator-userAgent&quot;&gt;&lt;a href=&quot;#window-navigator-userAgent&quot; class=&quot;headerlink&quot; title=&quot;window.navigator.userAgent&quot;&gt;&lt;/a&gt;&lt;code&gt;window.navigator.userAgent&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;實務上有判別造訪網頁是哪家OS的需求，可以用這支API來判定，
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://yuugou727.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>function .aplly() .call() 與 arguments</title>
    <link href="https://yuugou727.github.io/blog/2017/05/21/function-aplly-call-arguments/"/>
    <id>https://yuugou727.github.io/blog/2017/05/21/function-aplly-call-arguments/</id>
    <published>2017-05-21T07:28:59.000Z</published>
    <updated>2018-11-29T05:18:41.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="其實都圍繞著this"><a href="#其實都圍繞著this" class="headerlink" title="其實都圍繞著this"></a>其實都圍繞著this</h1><a id="more"></a><p>小弟剛入行時對<code>this</code>的印象就是用在物件 method 中，直接取得物件本身的 property：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fullName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> JC = &#123;</span><br><span class="line">    firstName: <span class="string">'Jim'</span>,</span><br><span class="line">    lastName: <span class="string">'Carrey'</span>,</span><br><span class="line">    fullName: fullName</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(JC.fullName()); <span class="comment">// "Jim Carrey"</span></span><br></pre></td></tr></table></figure><p>或是用於建構新物件用的 function constructor：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">star</span>(<span class="params">firstName, lastName</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.firstName = firstName;</span><br><span class="line">    <span class="keyword">this</span>.lastName = lastName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> JC = <span class="keyword">new</span> star(<span class="string">'Jim'</span>,<span class="string">'Carrey'</span>);</span><br><span class="line">star.prototype.fullName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(JC.fullName());<span class="comment">// "Jim Carrey"</span></span><br></pre></td></tr></table></figure><p>但也曾經一度誤解<code>this</code>是「專屬於物件的、不管怎樣都是指物件本身」的指標。</p><p>結果用 jQuery 有 <code>$(this)</code> ，某些情況指到不是自己要的對象，需要搭配 <code>.bind()</code> 的問題，稍微有點頭緒後，又在讀前輩 code 時看到完全陌生的 <code>.apply()</code> 跟 <code>.call()</code> ，一查之下才發現根本是 function 的原生 method 三兄弟，<strong>而且都跟 <code>this</code> 有關！</strong>腦洞越攪越大、債越背越多，不研究一下不行惹。</p><h1 id="估狗"><a href="#估狗" class="headerlink" title="估狗"></a>估狗</h1><p>於是拜讀這兩篇比較淺顯易懂的:</p><ul><li><a href="https://openhome.cc/Gossip/CodeData/EssentialJavaScript/This.html" target="_blank" rel="noopener">JavaScript 語言核心（11）this 是什麼？</a></li><li><a href="http://web.jobbole.com/83642/" target="_blank" rel="noopener">深入浅出妙用 Javascript 中 apply、call、bind</a></li></ul><h1 id="筆記"><a href="#筆記" class="headerlink" title="筆記"></a>筆記</h1><ul><li><code>this</code>參照呼叫的主體，如第一段 code 中是 JC 呼叫的，所以 fullName() 的 <code>this</code>參照的是 JC  物件本身。</li><li><code>.call()</code>能直接指定<code>this</code>參照至第一個參數，如以下這樣寫，結果與第一段 code 相同。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(fullName.call(JC)); <span class="comment">// "Jim Carrey"</span></span><br></pre></td></tr></table></figure><p>若是有參數的 function ，則接續在之後如<code>function.call( someObj, arg1, arg2, ...)</code></p><ul><li><code>.apply()</code>效果同<code>.call()</code>，只是用 Array 帶進 arguments 如<code>function.apply( someObj, [ arg1, arg2, ... ])</code></li></ul><h3 id="實務上-借別人的-method-來用"><a href="#實務上-借別人的-method-來用" class="headerlink" title="實務上 - 借別人的 method 來用"></a>實務上 - 借別人的 method 來用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [ <span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , <span class="number">-215</span> ]; </span><br><span class="line"><span class="keyword">var</span> maxInNumbers = <span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, numbers);   <span class="comment">//458</span></span><br><span class="line"><span class="keyword">var</span> maxInNumbers = <span class="built_in">Math</span>.max.call(<span class="built_in">Math</span>, <span class="number">5</span>, <span class="number">458</span> , <span class="number">120</span> , <span class="number">-215</span>); <span class="comment">//458</span></span><br></pre></td></tr></table></figure><blockquote><p>number 本身没有 max 方法，但是 Math 有，我们就可以借助 call 或者 apply 使用其方法。</p></blockquote><h3 id="那什麼是-arguments-引數"><a href="#那什麼是-arguments-引數" class="headerlink" title="那什麼是 arguments (引數)?"></a>那什麼是 arguments (引數)?</h3><p>常跟 parameters (參數) 搞混的名詞，中文翻譯也常常兩個 cosplay 對方，攻城屍還是多用英文吧。</p><p>個人是理解為： parameters 是 function <strong>在定義時宣告</strong>要使用的 variables，而 arguments 是 function <strong>在執行時被賦值</strong>後的 variables，同時 function 中也存在名為<code>arguments</code>的預設物件供內部呼叫，是一個<strong>類似 array 的物件</strong>，裡面存的就是帶進 function 的值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">x,y</span>)</span>&#123; <span class="comment">// x, y 為 parameter</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>); </span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> z = sum(<span class="number">500</span>,<span class="number">1000</span>); <span class="comment">// 500, 1000 為 arguments</span></span><br><span class="line"><span class="comment">// in console：</span></span><br><span class="line"><span class="comment">// [object Arguments]&#123; 0:500, 1:1000&#125;</span></span><br></pre></td></tr></table></figure><h1 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h1><ul><li><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="noopener">MDN - Arguments 物件的使用</a></li><li><a href="https://segmentfault.com/a/1190000000375138?page=1#articleHeader1" target="_blank" rel="noopener">segmentfault - 如何面试前端工程师：GitHub 很重要 第二部分：参数 arguments</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;其實都圍繞著this&quot;&gt;&lt;a href=&quot;#其實都圍繞著this&quot; class=&quot;headerlink&quot; title=&quot;其實都圍繞著this&quot;&gt;&lt;/a&gt;其實都圍繞著this&lt;/h1&gt;
    
    </summary>
    
      <category term="前端筆記" scheme="https://yuugou727.github.io/blog/categories/%E5%89%8D%E7%AB%AF%E7%AD%86%E8%A8%98/"/>
    
    
      <category term="JavaScript" scheme="https://yuugou727.github.io/blog/tags/JavaScript/"/>
    
  </entry>
  
</feed>
